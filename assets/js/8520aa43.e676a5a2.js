"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[4604],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return v}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(a),d=r,v=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return a?n.createElement(v,o(o({ref:t},c),{},{components:a})):n.createElement(v,o({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(67294),r=a(86010),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:a},t)}},74866:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(83117),r=a(67294),i=a(86010),o=a(12466),l=a(16550),u=a(91980),s=a(67392),c=a(50012);function p(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:p(a);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function d(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function v(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,u._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function f(e){var t,a,n,i,o=e.defaultValue,l=e.queryString,u=void 0!==l&&l,s=e.groupId,p=m(e),f=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:p})})),h=f[0],k=f[1],g=v({queryString:u,groupId:s}),N=g[0],b=g[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),a=(0,c.Nk)(t),n=a[0],i=a[1],[n,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),w=y[0],C=y[1],A=function(){var e=null!=N?N:w;return d({value:e,tabValues:p})?e:null}();return(0,r.useLayoutEffect)((function(){A&&k(A)}),[A]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!d({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);k(e),b(e),C(e)}),[b,C,p]),tabValues:p}}var h=a(72389),k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){var t=e.className,a=e.block,l=e.selectedValue,u=e.selectValue,s=e.tabValues,c=[],p=(0,o.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,a=c.indexOf(t),n=s[a].value;n!==l&&(p(t),u(n))},d=function(e){var t,a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var n,r=c.indexOf(e.currentTarget)+1;a=null!=(n=c[r])?n:c[0];break;case"ArrowLeft":var i,o=c.indexOf(e.currentTarget)-1;a=null!=(i=c[o])?i:c[c.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},s.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return c.push(e)},onKeyDown:d,onClick:m},o,{className:(0,i.Z)("tabs__item",k.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=a?a:t)})))}function N(e){var t=e.lazy,a=e.children,n=e.selectedValue;if(a=Array.isArray(a)?a:[a],t){var i=a.find((function(e){return e.props.value===n}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function b(e){var t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(g,(0,n.Z)({},e,t)),r.createElement(N,(0,n.Z)({},e,t)))}function y(e){var t=(0,h.Z)();return r.createElement(b,(0,n.Z)({key:String(t)},e))}},27875:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),o=(a(74866),a(85162),["components"]),l={id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},u=void 0,s={unversionedId:"navigation-actions",id:"version-1.x/navigation-actions",title:"NavigationActions reference",description:"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.",source:"@site/versioned_docs/version-1.x/navigation-actions.md",sourceDirName:".",slug:"/navigation-actions",permalink:"/docs/1.x/navigation-actions",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/navigation-actions.md",tags:[],version:"1.x",frontMatter:{id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},sidebar:"api",previous:{title:"Navigation prop",permalink:"/docs/1.x/navigation-prop"},next:{title:"StackNavigator",permalink:"/docs/1.x/stack-navigator"}},c={},p=[{value:"Navigate",id:"navigate",level:3},{value:"Reset",id:"reset",level:3},{value:"How to use the <code>index</code> parameter",id:"how-to-use-the-index-parameter",level:4},{value:"Replace",id:"replace",level:3},{value:"Back",id:"back",level:3},{value:"SetParams",id:"setparams",level:3}],m={toc:p},d="wrapper";function v(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationActions")," return an object that can be sent to the router using ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation.dispatch()")," method."),(0,i.kt)("p",null,"Note that if you want to dispatch react-navigation actions you should use the action creators provided in this library."),(0,i.kt)("p",null,"The following actions are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#navigate"},"Navigate")," - Navigate to another route"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#back"},"Back")," - Go back to previous state"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#setparams"},"Set Params")," - Set Params for given route"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#init"},"Init")," - Used to initialize first state if state is undefined")),(0,i.kt)("p",null,"Within a stack, you can also use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#reset"},"Reset")," - Replace current state with a new state"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#replace"},"Replace")," - Replace a route at a given key with another route"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#push"},"Push")," - Add a route on the top of the stack, and navigate forward to it"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#pop"},"Pop")," - Navigate back to previous routes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#poptotop"},"PopToTop")," - Navigate to the top route of the stack, dismissing all other routes")),(0,i.kt)("p",null,"The action creator functions define ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," to return the action type, which enables easy usage with third-party Redux libraries, including redux-actions and redux-saga."),(0,i.kt)("h3",{id:"navigate"},"Navigate"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Navigate")," action will update the current state with the result of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Navigate")," action."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routeName")," - ",(0,i.kt)("em",{parentName:"li"},"String")," - Required - A destination routeName that has been registered somewhere in the app's router"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,i.kt)("em",{parentName:"li"},"Object")," - Optional - Params to merge into the destination route"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action")," - ",(0,i.kt)("em",{parentName:"li"},"Object")," - Optional - (advanced) The sub-action to run in the child router, if the screen is a navigator. Any one of the actions described in this doc can be set as a sub-action."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,i.kt)("em",{parentName:"li"},"String")," - Optional - The identifier for the route to navigate to. Navigate back to this route if it already exists")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n")),(0,i.kt)("h3",{id:"reset"},"Reset"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Reset")," action wipes the whole navigation state and replaces it with the result of several actions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index")," - ",(0,i.kt)("em",{parentName:"li"},"number")," - required - Index of the active route on ",(0,i.kt)("inlineCode",{parentName:"li"},"routes")," array in navigation ",(0,i.kt)("inlineCode",{parentName:"li"},"state"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actions")," - ",(0,i.kt)("em",{parentName:"li"},"array")," - required - Array of Navigation Actions that will replace the navigation state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,i.kt)("em",{parentName:"li"},"string or null")," - optional - If set, the navigator with the given key will reset. If null, the root navigator will reset.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n")),(0,i.kt)("h4",{id:"how-to-use-the-index-parameter"},"How to use the ",(0,i.kt)("inlineCode",{parentName:"h4"},"index")," parameter"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," param is used to specify the current active route."),(0,i.kt)("p",null,"eg: given a basic stack navigation with two routes ",(0,i.kt)("inlineCode",{parentName:"p"},"Profile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings"),".\nTo reset the state to a point where the active screen was ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," but have it stacked on top of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Profile")," screen, you would do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst resetAction = NavigationActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n")),(0,i.kt)("h3",{id:"replace"},"Replace"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Replace")," action replaces the route at the given key with another route."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - _string - required - Key of the route to replace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"newKey")," - _string - Key to use for the replacement route. Generated automatically if not provided."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routeName")," - _string - ",(0,i.kt)("inlineCode",{parentName:"li"},"routeName")," to use for replacement route."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,i.kt)("em",{parentName:"li"},"object")," - Parameters to pass in to the replacement route."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action")," - ",(0,i.kt)("em",{parentName:"li"},"object")," - Optional sub-action."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"immediate"),"* - ",(0,i.kt)("em",{parentName:"li"},"boolean")," - ",(0,i.kt)("em",{parentName:"li"},"Currently has no effect"),", this is a placeholder for when ",(0,i.kt)("inlineCode",{parentName:"li"},"StackNavigator")," supports animated replace (it currently does not).")),(0,i.kt)("h3",{id:"back"},"Back"),(0,i.kt)("p",null,"Go back to previous screen and close current screen. ",(0,i.kt)("inlineCode",{parentName:"p"},"back")," action creator takes in one optional parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,i.kt)("em",{parentName:"li"},"string or null")," - optional - If set, navigation will go back from the given key. If null, navigation will go back anywhere.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n")),(0,i.kt)("h3",{id:"setparams"},"SetParams"),(0,i.kt)("p",null,"When dispatching ",(0,i.kt)("inlineCode",{parentName:"p"},"SetParams"),", the router will produce a new state that has changed the params of a particular route, as identified by the key"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,i.kt)("em",{parentName:"li"},"object")," - required - New params to be merged into existing route params"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,i.kt)("em",{parentName:"li"},"string")," - required - Route key that should get the new params")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n")))}v.isMDXComponent=!0}}]);