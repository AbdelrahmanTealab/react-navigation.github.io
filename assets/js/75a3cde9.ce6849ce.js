(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[1486],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94677:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var a=n(74034),i=n(79973),r=(n(67294),n(3905)),o={id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},c={unversionedId:"navigation-actions",id:"version-2.x/navigation-actions",isDocsHomePage:!1,title:"NavigationActions reference",description:"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.",source:"@site/versioned_docs/version-2.x/navigation-actions.md",sourceDirName:".",slug:"/navigation-actions",permalink:"/docs/2.x/navigation-actions",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/navigation-actions.md",version:"2.x",sidebar_label:"NavigationActions",frontMatter:{id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},sidebar:"version-2.x-api",previous:{title:"Navigation prop reference",permalink:"/docs/2.x/navigation-prop"},next:{title:"StackActions reference",permalink:"/docs/2.x/stack-actions"}},s=[{value:"navigate",id:"navigate",children:[]},{value:"back",id:"back",children:[]},{value:"setParams",id:"setparams",children:[]}],l={toc:s};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"NavigationActions")," return an object that can be sent to the router using ",(0,r.kt)("inlineCode",{parentName:"p"},"navigation.dispatch()")," method."),(0,r.kt)("p",null,"Note that if you want to dispatch react-navigation actions you should use the action creators provided in this library."),(0,r.kt)("p",null,"The following actions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#navigate"},"Navigate")," - Navigate to another route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#back"},"Back")," - Go back to previous state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setparams"},"Set Params")," - Set Params for given route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#init"},"Init")," - Used to initialize first state if state is undefined")),(0,r.kt)("p",null,"For actions specific to a StackNavigator, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.x/stack-actions"},"StackActions"),"."),(0,r.kt)("p",null,"The action creator functions define ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," to return the action type, which enables easy usage with third-party Redux libraries, including redux-actions and redux-saga."),(0,r.kt)("h3",{id:"navigate"},"navigate"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," action will update the current state with the result of a ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," action."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routeName")," - ",(0,r.kt)("em",{parentName:"li"},"String")," - Required - A destination routeName that has been registered somewhere in the app's router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,r.kt)("em",{parentName:"li"},"Object")," - Optional - Params to merge into the destination route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"action")," - ",(0,r.kt)("em",{parentName:"li"},"Object")," - Optional - (advanced) The sub-action to run in the child router, if the screen is a navigator. Any one of the actions described in this doc can be set as a sub-action."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"String")," - Optional - The identifier for the route to navigate to. Navigate back to this route if it already exists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n")),(0,r.kt)("h3",{id:"back"},"back"),(0,r.kt)("p",null,"Go back to previous screen and close current screen. ",(0,r.kt)("inlineCode",{parentName:"p"},"back")," action creator takes in one optional parameter:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"string or null")," - optional - If set, navigation will go back from the given key. If null, navigation will go back anywhere.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n")),(0,r.kt)("h3",{id:"setparams"},"setParams"),(0,r.kt)("p",null,"When dispatching ",(0,r.kt)("inlineCode",{parentName:"p"},"setParams"),", the router will produce a new state that has changed the params of a particular route, as identified by the key"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,r.kt)("em",{parentName:"li"},"object")," - required - New params to be merged into existing route params"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"string")," - required - Route key that should get the new params")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n")))}p.isMDXComponent=!0}}]);