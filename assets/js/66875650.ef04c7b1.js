"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[89352],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(86010),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(83117),r=n(67294),i=n(86010),o=n(12466),l=n(16550),s=n(91980),d=n(67392),c=n(50012);function u(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:u(n);return function(e){var t=(0,d.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function h(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function m(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function k(e){var t,n,a,i,o=e.defaultValue,l=e.queryString,s=void 0!==l&&l,d=e.groupId,u=p(e),k=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:u})})),f=k[0],v=k[1],g=m({queryString:s,groupId:d}),N=g[0],b=g[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),n=(0,c.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),C=y[0],w=y[1],S=function(){var e=null!=N?N:C;return h({value:e,tabValues:u})?e:null}();return(0,r.useLayoutEffect)((function(){S&&v(S)}),[S]),{selectedValue:f,selectValue:(0,r.useCallback)((function(e){if(!h({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);v(e),b(e),w(e)}),[b,w,u]),tabValues:u}}var f=n(72389),v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){var t=e.className,n=e.block,l=e.selectedValue,s=e.selectValue,d=e.tabValues,c=[],u=(0,o.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=c.indexOf(t),a=d[n].value;a!==l&&(u(t),s(a))},h=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=c.indexOf(e.currentTarget)+1;n=null!=(a=c[r])?a:c[0];break;case"ArrowLeft":var i,o=c.indexOf(e.currentTarget)-1;n=null!=(i=c[o])?i:c[c.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},d.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return c.push(e)},onKeyDown:h,onClick:p},o,{className:(0,i.Z)("tabs__item",v.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function N(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var i=n.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function b(e){var t=k(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",v.tabList)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function y(e){var t=(0,f.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},26977:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=(n(74866),n(85162),["components"]),l={id:"stack-navigator",title:"StackNavigator reference",sidebar_label:"StackNavigator"},s=void 0,d={unversionedId:"stack-navigator",id:"version-1.x/stack-navigator",title:"StackNavigator reference",description:"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-1.x/stack-navigator.md",sourceDirName:".",slug:"/stack-navigator",permalink:"/docs/1.x/stack-navigator",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/stack-navigator.md",tags:[],version:"1.x",frontMatter:{id:"stack-navigator",title:"StackNavigator reference",sidebar_label:"StackNavigator"},sidebar:"api",previous:{title:"NavigationActions",permalink:"/docs/1.x/navigation-actions"},next:{title:"SwitchNavigator",permalink:"/docs/1.x/switch-navigator"}},c={},u=[{value:"API Definition",id:"api-definition",level:2},{value:"RouteConfigs",id:"routeconfigs",level:3},{value:"StackNavigatorConfig",id:"stacknavigatorconfig",level:3},{value:"<code>navigationOptions</code> used by <code>StackNavigator</code>",id:"navigationoptions-used-by-stacknavigator",level:3},{value:"<code>title</code>",id:"title",level:4},{value:"<code>header</code>",id:"header",level:4},{value:"<code>headerTitle</code>",id:"headertitle",level:4},{value:"<code>headerTitleAllowFontScaling</code>",id:"headertitleallowfontscaling",level:4},{value:"<code>headerBackImage</code>",id:"headerbackimage",level:4},{value:"<code>headerBackTitle</code>",id:"headerbacktitle",level:4},{value:"<code>headerTruncatedBackTitle</code>",id:"headertruncatedbacktitle",level:4},{value:"<code>headerRight</code>",id:"headerright",level:4},{value:"<code>headerLeft</code>",id:"headerleft",level:4},{value:"<code>headerStyle</code>",id:"headerstyle",level:4},{value:"<code>headerForceInset</code>",id:"headerforceinset",level:4},{value:"<code>headerTitleStyle</code>",id:"headertitlestyle",level:4},{value:"<code>headerBackTitleStyle</code>",id:"headerbacktitlestyle",level:4},{value:"<code>headerTintColor</code>",id:"headertintcolor",level:4},{value:"<code>headerPressColorAndroid</code>",id:"headerpresscolorandroid",level:4},{value:"<code>headerTransparent</code>",id:"headertransparent",level:4},{value:"<code>headerBackground</code>",id:"headerbackground",level:4},{value:"<code>gesturesEnabled</code>",id:"gesturesenabled",level:4},{value:"<code>gestureResponseDistance</code>",id:"gestureresponsedistance",level:4},{value:"<code>gestureDirection</code>",id:"gesturedirection",level:4},{value:"Navigator Props",id:"navigator-props",level:3},{value:"Examples",id:"examples",level:3},{value:"Modal StackNavigator with Custom Screen Transitions",id:"modal-stacknavigator-with-custom-screen-transitions",level:4},{value:"Navigator props",id:"navigator-props-1",level:2}],p={toc:u},h="wrapper";function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a way for your app to transition between screens where each new screen is placed on top of a stack."),(0,i.kt)("p",null,"By default the StackNavigator is configured to have the familiar iOS and Android look & feel: new screens slide in from the right on iOS, fade in from the bottom on Android. On iOS the StackNavigator can also be configured to a modal style where screens slide in from the bottom."),(0,i.kt)("h2",{id:"api-definition"},"API Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"StackNavigator(RouteConfigs, StackNavigatorConfig);\n")),(0,i.kt)("h3",{id:"routeconfigs"},"RouteConfigs"),(0,i.kt)("p",null,"The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"StackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n")),(0,i.kt)("h3",{id:"stacknavigatorconfig"},"StackNavigatorConfig"),(0,i.kt)("p",null,"Options for the router:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialRouteName")," - Sets the default screen of the stack. Must match one of the keys in route configs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialRouteParams")," - The params for the initial route"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"navigationOptions")," - Default navigation options to use for screens"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paths")," - A mapping of overrides for the paths set in the route configs")),(0,i.kt)("p",null,"Visual options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mode")," - Defines the style for rendering and transitions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"card")," - Use the standard iOS and Android screen transitions. This is the default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modal")," - Make the screens slide in from the bottom which is a common iOS pattern. Only works on iOS, has no effect on Android."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headerMode")," - Specifies how the header should be rendered:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - Render a single header that stays at the top and animates as screens are changed. This is a common pattern on iOS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"screen")," - Each screen has a header attached to it and the header fades in and out together with the screen. This is a common pattern on Android."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"none")," - No header will be rendered."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headerTransitionPreset")," - Specifies how the header should transition from one screen to another when ",(0,i.kt)("inlineCode",{parentName:"li"},"headerMode: float")," is enabled.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fade-in-place")," - Header components cross-fade without moving, similar to the Twitter, Instagram, and Facebook app for iOS. This is the default value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uikit")," - An approximation of the default behavior for iOS."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cardStyle")," - Use this prop to override or extend the default style for an individual card in stack."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transitionConfig")," - Function to return an object that is merged with the default screen transitions (take a look at TransitionConfig in ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/react-navigation/react-navigation/blob/1.x/flow/react-navigation.js"},"type definitions"),"). Provided function will be passed the following arguments:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transitionProps")," - Transition props for the new screen."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prevTransitionProps")," - Transitions props for the old screen."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isModal")," - Boolean specifying if screen is modal."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onTransitionStart")," - Function to be invoked when the card transition animation is about to start."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onTransitionEnd")," - Function to be invoked once the card transition animation completes.")),(0,i.kt)("h3",{id:"navigationoptions-used-by-stacknavigator"},(0,i.kt)("inlineCode",{parentName:"h3"},"navigationOptions")," used by ",(0,i.kt)("inlineCode",{parentName:"h3"},"StackNavigator")),(0,i.kt)("h4",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h4"},"title")),(0,i.kt)("p",null,"String that can be used as a fallback for ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTitle"),". Additionally, will be used as a fallback for ",(0,i.kt)("inlineCode",{parentName:"p"},"tabBarLabel")," (if nested in a TabNavigator) or ",(0,i.kt)("inlineCode",{parentName:"p"},"drawerLabel")," (if nested in a DrawerNavigator)."),(0,i.kt)("h4",{id:"header"},(0,i.kt)("inlineCode",{parentName:"h4"},"header")),(0,i.kt)("p",null,"React Element or a function that given ",(0,i.kt)("inlineCode",{parentName:"p"},"HeaderProps")," returns a React Element, to display as a header. Setting to ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," hides header."),(0,i.kt)("h4",{id:"headertitle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTitle")),(0,i.kt)("p",null,"String, React Element or React Component used by the header. Defaults to scene ",(0,i.kt)("inlineCode",{parentName:"p"},"title"),". When a component is used, it receives ",(0,i.kt)("inlineCode",{parentName:"p"},"allowFontScaling"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," props. The title string is passed in ",(0,i.kt)("inlineCode",{parentName:"p"},"children"),"."),(0,i.kt)("h4",{id:"headertitleallowfontscaling"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTitleAllowFontScaling")),(0,i.kt)("p",null,"Whether header title font should scale to respect Text Size accessibility settings. Defaults to true."),(0,i.kt)("h4",{id:"headerbackimage"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerBackImage")),(0,i.kt)("p",null,"The image source (either a remote URL ",(0,i.kt)("inlineCode",{parentName:"p"},"{{uri: 'path/to/image'}}")," or a local file resource ",(0,i.kt)("inlineCode",{parentName:"p"},"{require('path/to/image')}"),") used by the back button.\nDefaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation/views/assets/back-icon.png"),", which is the default back icon image for the platform (a chevron on iOS and an arrow on Android)."),(0,i.kt)("h4",{id:"headerbacktitle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerBackTitle")),(0,i.kt)("p",null,"Title string used by the back button on iOS, or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," to disable label. Defaults to the previous scene's ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTitle"),"."),(0,i.kt)("h4",{id:"headertruncatedbacktitle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTruncatedBackTitle")),(0,i.kt)("p",null,"Title string used by the back button when ",(0,i.kt)("inlineCode",{parentName:"p"},"headerBackTitle")," doesn't fit on the screen. ",(0,i.kt)("inlineCode",{parentName:"p"},'"Back"')," by default."),(0,i.kt)("h4",{id:"headerright"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerRight")),(0,i.kt)("p",null,"React Element to display on the right side of the header."),(0,i.kt)("h4",{id:"headerleft"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerLeft")),(0,i.kt)("p",null,"React Element or Component to display on the left side of the header. When a component is used, it receives a number of props when rendered (",(0,i.kt)("inlineCode",{parentName:"p"},"onPress"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"titleStyle")," and more - check ",(0,i.kt)("inlineCode",{parentName:"p"},"Header.js")," for the complete list)."),(0,i.kt)("h4",{id:"headerstyle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerStyle")),(0,i.kt)("p",null,"Style object for the header"),(0,i.kt)("h4",{id:"headerforceinset"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerForceInset")),(0,i.kt)("p",null,"Allows to pass ",(0,i.kt)("inlineCode",{parentName:"p"},"forceInset")," object to internal SafeAreaView used in the header."),(0,i.kt)("h4",{id:"headertitlestyle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTitleStyle")),(0,i.kt)("p",null,"Style object for the title component"),(0,i.kt)("h4",{id:"headerbacktitlestyle"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerBackTitleStyle")),(0,i.kt)("p",null,"Style object for the back title"),(0,i.kt)("h4",{id:"headertintcolor"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTintColor")),(0,i.kt)("p",null,"Tint color for the header"),(0,i.kt)("h4",{id:"headerpresscolorandroid"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerPressColorAndroid")),(0,i.kt)("p",null,"Color for material ripple (Android >= 5.0 only)"),(0,i.kt)("h4",{id:"headertransparent"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerTransparent")),(0,i.kt)("p",null,"Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the header will not have a background unless you explicitly provide it with ",(0,i.kt)("inlineCode",{parentName:"p"},"headerStyle")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"headerBackground"),"."),(0,i.kt)("h4",{id:"headerbackground"},(0,i.kt)("inlineCode",{parentName:"h4"},"headerBackground")),(0,i.kt)("p",null,"Use this with ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTransparent")," to provide a component to render in the background of the header. You can use this with a blur view, for example, to create a translucent header."),(0,i.kt)("h4",{id:"gesturesenabled"},(0,i.kt)("inlineCode",{parentName:"h4"},"gesturesEnabled")),(0,i.kt)("p",null,"Whether you can use gestures to dismiss this screen. Defaults to true on iOS, false on Android."),(0,i.kt)("h4",{id:"gestureresponsedistance"},(0,i.kt)("inlineCode",{parentName:"h4"},"gestureResponseDistance")),(0,i.kt)("p",null,"Object to override the distance of touch start from the edge of the screen to recognize gestures. It takes the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"horizontal")," - ",(0,i.kt)("em",{parentName:"li"},"number")," - Distance for horizontal direction. Defaults to 25."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"vertical")," - ",(0,i.kt)("em",{parentName:"li"},"number")," - Distance for vertical direction. Defaults to 135.")),(0,i.kt)("h4",{id:"gesturedirection"},(0,i.kt)("inlineCode",{parentName:"h4"},"gestureDirection")),(0,i.kt)("p",null,"String to override the direction for dismiss gesture. ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," for normal behaviour or ",(0,i.kt)("inlineCode",{parentName:"p"},"inverted")," for right-to-left swipes."),(0,i.kt)("h3",{id:"navigator-props"},"Navigator Props"),(0,i.kt)("p",null,"The navigator component created by ",(0,i.kt)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens, for example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const SomeStack = StackNavigator({\n  // config\n});\n\n<SomeStack\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("p",null,"See the examples ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/SimpleStack.js"},"SimpleStack.js")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/ModalStack.js"},"ModalStack.js")," which you can run locally as part of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground"},"NavigationPlayground")," app."),(0,i.kt)("p",null,"You can view these examples directly on your phone by visiting ",(0,i.kt)("a",{parentName:"p",href:"https://exp.host/@react-navigation/NavigationPlayground"},"our expo demo"),"."),(0,i.kt)("h4",{id:"modal-stacknavigator-with-custom-screen-transitions"},"Modal StackNavigator with Custom Screen Transitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const ModalNavigator = StackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    navigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: sceneProps => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n")),(0,i.kt)("p",null,"Header transitions can also be configured using ",(0,i.kt)("inlineCode",{parentName:"p"},"headerLeftInterpolator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTitleInterpolator")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"headerRightInterpolator")," fields under ",(0,i.kt)("inlineCode",{parentName:"p"},"transitionConfig"),"."),(0,i.kt)("h2",{id:"navigator-props-1"},"Navigator props"),(0,i.kt)("p",null,"The navigator component created by ",(0,i.kt)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens and navigation options, for example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const StackNav = StackNavigator({\n  // config\n});\n\n<StackNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")))}m.isMDXComponent=!0}}]);