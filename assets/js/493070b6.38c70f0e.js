"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[84999],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},58215:function(e,t,a){var n=a(67294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},55064:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(87462),r=a(67294),i=a(72389),o=a(79443);var l=function(){var e=(0,r.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=a(99558),u=a(86010),c="tabItem_1uMI";function p(e){var t,a,n,i=e.lazy,o=e.block,p=e.defaultValue,d=e.values,m=e.groupId,b=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,s.lx)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===p?p:null!=(t=null!=p?p:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(n=h[0])?void 0:n.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=l(),y=k.tabGroupChoices,N=k.setTabGroupChoices,C=(0,r.useState)(g),w=C[0],T=C[1],x=[],O=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var B=y[m];null!=B&&B!==w&&v.some((function(e){return e.value===B}))&&T(B)}var E=function(e){var t=e.currentTarget,a=x.indexOf(t),n=v[a].value;n!==w&&(O(t),T(n),null!=m&&N(m,n))},j=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=x.indexOf(e.currentTarget)+1;a=x[n]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;a=x[r]||x[x.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":o},b)},v.map((function(e){var t=e.value,a=e.label;return r.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":w===t}),key:t,ref:function(e){return x.push(e)},onKeyDown:j,onFocus:E,onClick:E},null!=a?a:t)}))),i?(0,r.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function d(e){var t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},79443:function(e,t,a){var n=(0,a(67294).createContext)(void 0);t.Z=n},52993:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return b}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),o=a(55064),l=a(58215),s=["components"],u={id:"material-bottom-tab-navigator",title:"createMaterialBottomTabNavigator",sidebar_label:"createMaterialBottomTabNavigator"},c=void 0,p={unversionedId:"material-bottom-tab-navigator",id:"version-2.x/material-bottom-tab-navigator",isDocsHomePage:!1,title:"createMaterialBottomTabNavigator",description:"A material-design themed tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused.",source:"@site/versioned_docs/version-2.x/material-bottom-tab-navigator.md",sourceDirName:".",slug:"/material-bottom-tab-navigator",permalink:"/docs/2.x/material-bottom-tab-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/material-bottom-tab-navigator.md",tags:[],version:"2.x",frontMatter:{id:"material-bottom-tab-navigator",title:"createMaterialBottomTabNavigator",sidebar_label:"createMaterialBottomTabNavigator"},sidebar:"version-2.x-api",previous:{title:"createBottomTabNavigator",permalink:"/docs/2.x/bottom-tab-navigator"},next:{title:"createMaterialTopTabNavigator",permalink:"/docs/2.x/material-top-tab-navigator"}},d=[{value:"RouteConfigs",id:"routeconfigs",children:[],level:2},{value:"MaterialBottomTabNavigatorConfig",id:"materialbottomtabnavigatorconfig",children:[],level:2},{value:"<code>navigationOptions</code> for screens inside of the navigator",id:"navigationoptions-for-screens-inside-of-the-navigator",children:[{value:"<code>title</code>",id:"title",children:[],level:4},{value:"<code>tabBarIcon</code>",id:"tabbaricon",children:[],level:4},{value:"<code>tabBarColor</code>",id:"tabbarcolor",children:[],level:4},{value:"<code>tabBarLabel</code>",id:"tabbarlabel",children:[],level:4},{value:"<code>tabBarAccessibilityLabel</code>",id:"tabbaraccessibilitylabel",children:[],level:4},{value:"<code>tabBarTestID</code>",id:"tabbartestid",children:[],level:4},{value:"<code>tabBarOnPress</code>",id:"tabbaronpress",children:[],level:4}],level:2},{value:"Using with <code>react-native-paper</code> (optional)",id:"using-with-react-native-paper-optional",children:[],level:2}],m={toc:d};function b(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A material-design themed tab bar on the bottom of the screen that lets you switch between different routes. Routes are lazily initialized -- their screen components are not mounted until they are first focused."),(0,i.kt)("img",{src:"/assets/navigators/bottom-navigation.gif",style:{width:"420px",maxWidth:"100%"}}),(0,i.kt)("p",null,"To use this navigator, you need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation-material-bottom-tabs")),(0,i.kt)(o.Z,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install react-navigation-material-bottom-tabs react-native-paper\n"))),(0,i.kt)(l.Z,{value:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-navigation-material-bottom-tabs react-native-paper\n")))),(0,i.kt)("p",null,"This API also requires that you install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-vector-icons"),"! If you are using Expo, it will just work out of the box. Otherwise, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oblador/react-native-vector-icons#installation"},"follow these installation instructions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"createMaterialBottomTabNavigator(RouteConfigs, MaterialBottomTabNavigatorConfig);\n")),(0,i.kt)("p",null,"This library uses the ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/bottom-navigation.html"},(0,i.kt)("inlineCode",{parentName:"a"},"BottomNavigation")," component from ",(0,i.kt)("inlineCode",{parentName:"a"},"react-native-paper")),". It doesn't include the whole ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper")," library in your bundle, so you don't need to worry about it."),(0,i.kt)("h2",{id:"routeconfigs"},"RouteConfigs"),(0,i.kt)("p",null,"The route configs object is a mapping from route name to a route config."),(0,i.kt)("h2",{id:"materialbottomtabnavigatorconfig"},"MaterialBottomTabNavigatorConfig"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"shifting")," - Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label. By default, this is ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," when you have more than 3 tabs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"labeled")," - Whether to show labels in tabs. When ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", only icons will be displayed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"activeColor")," - Custom color for icon and label in the active tab."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inactiveColor")," - Custom color for icon and label in the inactive tab."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"barStyle")," - Style for the bottom navigation bar. You can set a bottom padding here if you have a translucent navigation bar on Android: ",(0,i.kt)("inlineCode",{parentName:"li"},"barStyle={{ paddingBottom: 48 }}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialRouteName")," - The routeName for the initial tab route when first loading."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"order")," - Array of routeNames which defines the order of the tabs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paths")," - Provide a mapping of routeName to path config, which overrides the paths set in the routeConfigs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"backBehavior")," - Should the back button cause a tab switch to the initial tab? If yes, set to ",(0,i.kt)("inlineCode",{parentName:"li"},"initialRoute"),", otherwise ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),". Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"initialRoute")," behavior.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export default createMaterialBottomTabNavigator({\n  Album: { screen: Album },\n  Library: { screen: Library },\n  History: { screen: History },\n  Cart: { screen: Cart },\n}, {\n  initialRouteName: 'Album',\n  activeColor: '#f0edf6',\n  inactiveColor: '#3e2465',\n  barStyle: { backgroundColor: '#694fad' },\n});\n")),(0,i.kt)("h2",{id:"navigationoptions-for-screens-inside-of-the-navigator"},(0,i.kt)("inlineCode",{parentName:"h2"},"navigationOptions")," for screens inside of the navigator"),(0,i.kt)("h4",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h4"},"title")),(0,i.kt)("p",null,"Generic title that can be used as a fallback for ",(0,i.kt)("inlineCode",{parentName:"p"},"headerTitle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tabBarLabel"),"."),(0,i.kt)("h4",{id:"tabbaricon"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarIcon")),(0,i.kt)("p",null,"React Element or a function that given ",(0,i.kt)("inlineCode",{parentName:"p"},"{ focused: boolean, horizontal: boolean, tintColor: string }")," returns a React.Node, to display in the tab bar. ",(0,i.kt)("inlineCode",{parentName:"p"},"horizontal")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," when the device is in landscape and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," when portrait. The icon is re-rendered whenever the device orientation changes."),(0,i.kt)("h4",{id:"tabbarcolor"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarColor")),(0,i.kt)("p",null,"Color for the tab bar when the tab corresponding to the screen is active. Used for the ripple effect. This is only supported when ",(0,i.kt)("inlineCode",{parentName:"p"},"shifting")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"tabbarlabel"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarLabel")),(0,i.kt)("p",null,"Title string of a tab displayed in the tab bar. When undefined, scene ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," is used. To hide, see ",(0,i.kt)("inlineCode",{parentName:"p"},"labeled")," option in the previous section."),(0,i.kt)("h4",{id:"tabbaraccessibilitylabel"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarAccessibilityLabel")),(0,i.kt)("p",null,"Accessibility label for the tab button. This is read by the screen reader when the user taps the tab. It's recommended to set this if you don't have a label for the tab."),(0,i.kt)("h4",{id:"tabbartestid"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarTestID")),(0,i.kt)("p",null,"ID to locate this tab button in tests."),(0,i.kt)("h4",{id:"tabbaronpress"},(0,i.kt)("inlineCode",{parentName:"h4"},"tabBarOnPress")),(0,i.kt)("p",null,"Callback to handle press events; the argument is an object containing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"navigation"),": navigation prop for the screen"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultHandler"),": the default handler for tab press")),(0,i.kt)("p",null,"Useful for adding a custom logic before the transition to the next scene (the tapped one) starts."),(0,i.kt)("h2",{id:"using-with-react-native-paper-optional"},"Using with ",(0,i.kt)("inlineCode",{parentName:"h2"},"react-native-paper")," (optional)"),(0,i.kt)("p",null,"You can use the theming support in ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper")," to customize the material bottom navigation by wrapping your app in ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/getting-started.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Provider")," from ",(0,i.kt)("inlineCode",{parentName:"a"},"react-native-paper")),". A common use case for this can be to customize the background color for the screens when your app has a dark theme. Follow the ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/theming.html"},"instructions on ",(0,i.kt)("inlineCode",{parentName:"a"},"react-native-paper"),"'s documentation")," to learn how to customize the theme."))}b.isMDXComponent=!0}}]);