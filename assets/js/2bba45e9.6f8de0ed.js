"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[5801],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,k=u["".concat(d,".").concat(h)]||u[h]||c[h]||l;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(87462),i=n(67294),l=n(72389),r=n(79443);var o=function(){var e=(0,i.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},d=n(99558),s=n(86010),p="tabItem_1uMI";function c(e){var t,n,a,l=e.lazy,r=e.block,c=e.defaultValue,u=e.values,h=e.groupId,k=e.className,m=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"string"==typeof e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=u?u:m.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),N=(0,d.lx)(v,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===c?c:null!=(t=null!=c?c:null==(n=m.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=m[0])?void 0:a.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=o(),b=g.tabGroupChoices,C=g.setTabGroupChoices,y=(0,i.useState)(f),w=y[0],S=y[1],T=[],O=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var x=b[h];null!=x&&x!==w&&v.some((function(e){return e.value===x}))&&S(x)}var B=function(e){var t=e.currentTarget,n=T.indexOf(t),a=v[n].value;a!==w&&(O(t),S(a),null!=h&&C(h,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var i=T.indexOf(e.currentTarget)-1;n=T[i]||T[T.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},k)},v.map((function(e){var t=e.value,n=e.label;return i.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,s.Z)("tabs__item",p,{"tabs__item--active":w===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:E,onFocus:B,onClick:B},null!=n?n:t)}))),l?(0,i.cloneElement)(m.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},m.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function u(e){var t=(0,l.Z)();return i.createElement(c,(0,a.Z)({key:String(t)},e))}},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},63224:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return k}});var a=n(87462),i=n(63366),l=(n(67294),n(3905)),r=n(55064),o=n(58215),d=["components"],s={id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},p=void 0,c={unversionedId:"native-stack-navigator",id:"version-6.x/native-stack-navigator",isDocsHomePage:!1,title:"Native Stack Navigator",description:"Native Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-6.x/native-stack-navigator.md",sourceDirName:".",slug:"/native-stack-navigator",permalink:"/docs/native-stack-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/native-stack-navigator.md",tags:[],version:"6.x",frontMatter:{id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},sidebar:"version-6.x/docs",previous:{title:"Stack",permalink:"/docs/stack-navigator"},next:{title:"Drawer",permalink:"/docs/drawer-navigator"}},u=[{value:"Installation",id:"installation",children:[],level:2},{value:"API Definition",id:"api-definition",children:[{value:"Props",id:"props",children:[{value:"<code>initialRouteName</code>",id:"initialroutename",children:[],level:4},{value:"<code>screenOptions</code>",id:"screenoptions",children:[],level:4}],level:3},{value:"Options",id:"options",children:[{value:"<code>title</code>",id:"title",children:[],level:4},{value:"<code>headerBackVisible</code>",id:"headerbackvisible",children:[],level:4},{value:"<code>headerBackTitle</code>",id:"headerbacktitle",children:[],level:4},{value:"<code>headerBackTitleVisible</code>",id:"headerbacktitlevisible",children:[],level:4},{value:"<code>headerBackTitleStyle</code>",id:"headerbacktitlestyle",children:[],level:4},{value:"<code>headerBackImageSource</code>",id:"headerbackimagesource",children:[],level:4},{value:"<code>headerLargeStyle</code>",id:"headerlargestyle",children:[],level:4},{value:"<code>headerLargeTitle</code>",id:"headerlargetitle",children:[],level:4},{value:"<code>headerLargeTitleShadowVisible</code>",id:"headerlargetitleshadowvisible",children:[],level:4},{value:"<code>headerLargeTitleStyle</code>",id:"headerlargetitlestyle",children:[],level:4},{value:"<code>headerShown</code>",id:"headershown",children:[],level:4},{value:"<code>headerStyle</code>",id:"headerstyle",children:[],level:4},{value:"<code>headerShadowVisible</code>",id:"headershadowvisible",children:[],level:4},{value:"<code>headerTransparent</code>",id:"headertransparent",children:[],level:4},{value:"<code>headerBlurEffect</code>",id:"headerblureffect",children:[],level:4},{value:"<code>headerTintColor</code>",id:"headertintcolor",children:[],level:4},{value:"<code>headerLeft</code>",id:"headerleft",children:[],level:4},{value:"<code>headerRight</code>",id:"headerright",children:[],level:4},{value:"<code>headerTitle</code>",id:"headertitle",children:[],level:4},{value:"<code>headerTitleAlign</code>",id:"headertitlealign",children:[],level:4},{value:"<code>headerTitleStyle</code>",id:"headertitlestyle",children:[],level:4},{value:"<code>headerSearchBarOptions</code>",id:"headersearchbaroptions",children:[{value:"<code>autoCapitalize</code>",id:"autocapitalize",children:[],level:5},{value:"<code>autoFocus</code>",id:"autofocus",children:[],level:5},{value:"<code>barTintColor</code>",id:"bartintcolor",children:[],level:5},{value:"<code>cancelButtonText</code>",id:"cancelbuttontext",children:[],level:5},{value:"<code>disableBackButtonOverride</code>",id:"disablebackbuttonoverride",children:[],level:5},{value:"<code>hideNavigationBar</code>",id:"hidenavigationbar",children:[],level:5},{value:"<code>hideWhenScrolling</code>",id:"hidewhenscrolling",children:[],level:5},{value:"<code>inputType</code>",id:"inputtype",children:[],level:5},{value:"<code>obscureBackground</code>",id:"obscurebackground",children:[],level:5},{value:"<code>placeholder</code>",id:"placeholder",children:[],level:5},{value:"<code>textColor</code>",id:"textcolor",children:[],level:5},{value:"<code>hintTextColor</code>",id:"hinttextcolor",children:[],level:5},{value:"<code>headerIconColor</code>",id:"headericoncolor",children:[],level:5},{value:"<code>shouldShowHintSearchIcon</code>",id:"shouldshowhintsearchicon",children:[],level:5},{value:"<code>onBlur</code>",id:"onblur",children:[],level:5},{value:"<code>onCancelButtonPress</code>",id:"oncancelbuttonpress",children:[],level:5},{value:"<code>onChangeText</code>",id:"onchangetext",children:[],level:5}],level:4},{value:"<code>header</code>",id:"header",children:[],level:4},{value:"<code>statusBarAnimation</code>",id:"statusbaranimation",children:[],level:4},{value:"<code>statusBarHidden</code>",id:"statusbarhidden",children:[],level:4},{value:"<code>statusBarStyle</code>",id:"statusbarstyle",children:[],level:4},{value:"<code>contentStyle</code>",id:"contentstyle",children:[],level:4},{value:"<code>gestureEnabled</code>",id:"gestureenabled",children:[],level:4},{value:"<code>animationTypeForReplace</code>",id:"animationtypeforreplace",children:[],level:4},{value:"<code>animation</code>",id:"animation",children:[],level:4},{value:"<code>presentation</code>",id:"presentation",children:[],level:4},{value:"<code>orientation</code>",id:"orientation",children:[],level:4}],level:3},{value:"Events",id:"events",children:[{value:"<code>transitionStart</code>",id:"transitionstart",children:[],level:4},{value:"<code>transitionEnd</code>",id:"transitionend",children:[],level:4}],level:3},{value:"Helpers",id:"helpers",children:[{value:"<code>push</code>",id:"push",children:[],level:4},{value:"<code>pop</code>",id:"pop",children:[],level:4},{value:"<code>popToTop</code>",id:"poptotop",children:[],level:4}],level:3}],level:2},{value:"Example",id:"example",children:[],level:2}],h={toc:u};function k(e){var t=e.components,n=(0,i.Z)(e,d);return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Native Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack."),(0,l.kt)("p",null,"This navigator uses the native APIs ",(0,l.kt)("inlineCode",{parentName:"p"},"UINavigationController")," on iOS and ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," on Android so that navigation built with ",(0,l.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," will behave exactly the same and have the same performance characteristics as apps built natively on top of those APIs. It also offers basic Web support using ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/necolas/react-native-web"},(0,l.kt)("inlineCode",{parentName:"a"},"react-native-web")),"."),(0,l.kt)("p",null,"One thing to keep in mind is that while ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/native-stack")," offers native performance and exposes native features such as large title on iOS etc., it may not be as customizable as ",(0,l.kt)("a",{parentName:"p",href:"/docs/stack-navigator"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/stack"))," depending on your needs. So if you need more customization than what's possible in this navigator, consider using ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/stack")," instead - which is a more customizable JavaScript based implementation."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"To use this navigator, ensure that you have ",(0,l.kt)("a",{parentName:"p",href:"/docs/getting-started"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/native")," and its dependencies (follow this guide)"),", then install ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/main/packages/native-stack"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/native-stack")),":"),(0,l.kt)(r.Z,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-navigation/native-stack\n"))),(0,l.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @react-navigation/native-stack\n")))),(0,l.kt)("h2",{id:"api-definition"},"API Definition"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 If you encounter any bugs while using ",(0,l.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator"),", please open issues on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-screens"},(0,l.kt)("inlineCode",{parentName:"a"},"react-native-screens"))," rather than the ",(0,l.kt)("inlineCode",{parentName:"p"},"react-navigation")," repository!")),(0,l.kt)("p",null,"To use this navigator, import it from ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/native-stack"),":"),(0,l.kt)("samp",{id:"simple-native-stack"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { createNativeStackNavigator } from \'@react-navigation/native-stack\';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name="Home" component={Home} />\n      <Stack.Screen name="Notifications" component={Notifications} />\n      <Stack.Screen name="Profile" component={Profile} />\n      <Stack.Screen name="Settings" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n')),(0,l.kt)("h3",{id:"props"},"Props"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Stack.Navigator")," component accepts following props:"),(0,l.kt)("h4",{id:"initialroutename"},(0,l.kt)("inlineCode",{parentName:"h4"},"initialRouteName")),(0,l.kt)("p",null,"The name of the route to render on first load of the navigator."),(0,l.kt)("h4",{id:"screenoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"screenOptions")),(0,l.kt)("p",null,"Default options to use for the screens in the navigator."),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"The following ",(0,l.kt)("a",{parentName:"p",href:"/docs/screen-options"},"options")," can be used to configure the screens in the navigator:"),(0,l.kt)("h4",{id:"title"},(0,l.kt)("inlineCode",{parentName:"h4"},"title")),(0,l.kt)("p",null,"String that can be used as a fallback for ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTitle"),"."),(0,l.kt)("h4",{id:"headerbackvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackVisible")),(0,l.kt)("p",null,"Whether the back button is visible in the header. You can use it to show a back button alongside ",(0,l.kt)("inlineCode",{parentName:"p"},"headerLeft")," if you have specified it."),(0,l.kt)("p",null,"This will have no effect on the first screen in the stack."),(0,l.kt)("h4",{id:"headerbacktitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitle")),(0,l.kt)("p",null,"Title string used by the back button on iOS. Defaults to the previous scene's title, or \"Back\" if there's not enough space. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"headerBackTitleVisible: false")," to hide it."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbacktitlevisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitleVisible")),(0,l.kt)("p",null,"Whether the back button title should be visible or not."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbacktitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitleStyle")),(0,l.kt)("p",null,"Style object for header back title. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbackimagesource"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackImageSource")),(0,l.kt)("p",null,"Image to display in the header as the icon in the back button.  Defaults to back icon image for the platform"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A chevron on iOS"),(0,l.kt)("li",{parentName:"ul"},"An arrow on Android")),(0,l.kt)("h4",{id:"headerlargestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeStyle")),(0,l.kt)("p",null,"Style of the header when a large title is shown. The large title is shown if ",(0,l.kt)("inlineCode",{parentName:"p"},"headerLargeTitle")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," and the edge of any scrollable content reaches the matching edge of the header."),(0,l.kt)("p",null,"Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"backgroundColor")),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerlargetitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitle")),(0,l.kt)("p",null,"Whether to enable header with large title which collapses to regular header on scroll."),(0,l.kt)("p",null,"For large title to collapse on scroll, the content of the screen should be wrapped in a scrollable view such as ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList"),". If the scrollable area doesn't fill the screen, the large title won't collapse on scroll. You also need to specify ",(0,l.kt)("inlineCode",{parentName:"p"},'contentInsetAdjustmentBehavior="automatic"')," in your ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList")," etc."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerlargetitleshadowvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitleShadowVisible")),(0,l.kt)("p",null,"Whether drop shadow of header is visible when a large title is shown."),(0,l.kt)("h4",{id:"headerlargetitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitleStyle")),(0,l.kt)("p",null,"Style object for large title in header. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontWeight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headershown"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerShown")),(0,l.kt)("p",null,"Whether to show the header. The header is shown by default. Setting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," hides the header."),(0,l.kt)("h4",{id:"headerstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerStyle")),(0,l.kt)("p",null,"Style object for header. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"backgroundColor"))),(0,l.kt)("h4",{id:"headershadowvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerShadowVisible")),(0,l.kt)("p",null,"Whether to hide the elevation shadow (Android) or the bottom border (iOS) on the header."),(0,l.kt)("h4",{id:"headertransparent"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTransparent")),(0,l.kt)("p",null,"Boolean indicating whether the navigation bar is translucent."),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Setting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," makes the header absolutely positioned - so that the header floats over the screen so that it overlaps the content underneath, and changes the background color to ",(0,l.kt)("inlineCode",{parentName:"p"},"transparent")," unless specified in ",(0,l.kt)("inlineCode",{parentName:"p"},"headerStyle"),"."),(0,l.kt)("p",null,"This is useful if you want to render a semi-transparent header or a blurred background."),(0,l.kt)("p",null,"Note that if you don't want your content to appear under the header, you need to manually add a top margin to your content. React Navigation won't do it automatically."),(0,l.kt)("p",null,"To get the height of the header, you can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/elements#headerheightcontext"},(0,l.kt)("inlineCode",{parentName:"a"},"HeaderHeightContext"))," with ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html#contextconsumer"},"React's Context API")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/elements#useheaderheight"},(0,l.kt)("inlineCode",{parentName:"a"},"useHeaderHeight")),"."),(0,l.kt)("h4",{id:"headerblureffect"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBlurEffect")),(0,l.kt)("p",null,"Blur effect for the translucent header. The ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTransparent")," option needs to be set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," for this to work."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extraLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"light")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"regular")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prominent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterialDark"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headertintcolor"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTintColor")),(0,l.kt)("p",null,"Tint color for the header. Changes the color of back button and title."),(0,l.kt)("h4",{id:"headerleft"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLeft")),(0,l.kt)("p",null,"Function which returns a React Element to display on the left side of the header. This replaces the back button. See ",(0,l.kt)("inlineCode",{parentName:"p"},"headerBackVisible")," to show the back button along side left element."),(0,l.kt)("h4",{id:"headerright"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerRight")),(0,l.kt)("p",null,"Function which returns a React Element to display on the right side of the header."),(0,l.kt)("h4",{id:"headertitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitle")),(0,l.kt)("p",null,"String or a function that returns a React Element to be used by the header. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," or name of the screen."),(0,l.kt)("p",null,"When a function is passed, it receives ",(0,l.kt)("inlineCode",{parentName:"p"},"tintColor")," and",(0,l.kt)("inlineCode",{parentName:"p"},"children")," in the options object as an argument. The title string is passed in ",(0,l.kt)("inlineCode",{parentName:"p"},"children"),"."),(0,l.kt)("p",null,"Note that if you render a custom element by passing a function, animations for the title won't work."),(0,l.kt)("h4",{id:"headertitlealign"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitleAlign")),(0,l.kt)("p",null,"How to align the header title. Possible values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"left")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"center"))),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"left")," on platforms other than iOS."),(0,l.kt)("p",null,"Not supported on iOS. It's always ",(0,l.kt)("inlineCode",{parentName:"p"},"center")," on iOS and cannot be changed."),(0,l.kt)("h4",{id:"headertitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitleStyle")),(0,l.kt)("p",null,"Style object for header title. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontWeight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color"))),(0,l.kt)("h4",{id:"headersearchbaroptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerSearchBarOptions")),(0,l.kt)("p",null,"Options to render a native search bar on iOS. Search bars are rarely static so normally it is controlled by passing an object to ",(0,l.kt)("inlineCode",{parentName:"p"},"headerSearchBarOptions")," navigation option in the component's body. You also need to specify ",(0,l.kt)("inlineCode",{parentName:"p"},'contentInsetAdjustmentBehavior="automatic"')," in your ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList")," etc. If you don't have a ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", specify ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTransparent: false"),"."),(0,l.kt)("p",null,"Only supported on iOS and Android."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      // search bar options\n    }\n  });\n}, [navigation]);\n")),(0,l.kt)("p",null,"Supported properties are described below."),(0,l.kt)("h5",{id:"autocapitalize"},(0,l.kt)("inlineCode",{parentName:"h5"},"autoCapitalize")),(0,l.kt)("p",null,"Controls whether the text is automatically auto-capitalized as it is entered by the user.\nPossible values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"none")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"words")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sentences")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"characters"))),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"sentences"),"."),(0,l.kt)("h5",{id:"autofocus"},(0,l.kt)("inlineCode",{parentName:"h5"},"autoFocus")),(0,l.kt)("p",null,"Whether to automatically focus search bar when it's shown. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"bartintcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"barTintColor")),(0,l.kt)("p",null,"The search field background color. By default bar tint color is translucent."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"cancelbuttontext"},(0,l.kt)("inlineCode",{parentName:"h5"},"cancelButtonText")),(0,l.kt)("p",null,"The text to be used instead of default ",(0,l.kt)("inlineCode",{parentName:"p"},"Cancel")," button text."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"disablebackbuttonoverride"},(0,l.kt)("inlineCode",{parentName:"h5"},"disableBackButtonOverride")),(0,l.kt)("p",null,"Whether the back button should close search bar's text input or not. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"hidenavigationbar"},(0,l.kt)("inlineCode",{parentName:"h5"},"hideNavigationBar")),(0,l.kt)("p",null,"Boolean indicating whether to hide the navigation bar during searching. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"hidewhenscrolling"},(0,l.kt)("inlineCode",{parentName:"h5"},"hideWhenScrolling")),(0,l.kt)("p",null,"Boolean indicating whether to hide the search bar when scrolling. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"inputtype"},(0,l.kt)("inlineCode",{parentName:"h5"},"inputType")),(0,l.kt)("p",null,"The type of the input. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},'"text"'),"."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"text"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"phone"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"number"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"email"'))),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"obscurebackground"},(0,l.kt)("inlineCode",{parentName:"h5"},"obscureBackground")),(0,l.kt)("p",null,"Boolean indicating whether to obscure the underlying content with semi-transparent overlay. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h5",{id:"placeholder"},(0,l.kt)("inlineCode",{parentName:"h5"},"placeholder")),(0,l.kt)("p",null,"Text displayed when search field is empty."),(0,l.kt)("h5",{id:"textcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"textColor")),(0,l.kt)("p",null,"The color of the text in the search field."),(0,l.kt)("h5",{id:"hinttextcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"hintTextColor")),(0,l.kt)("p",null,"The color of the hint text in the search field."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"headericoncolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"headerIconColor")),(0,l.kt)("p",null,"The color of the search and close icons shown in the header"),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"shouldshowhintsearchicon"},(0,l.kt)("inlineCode",{parentName:"h5"},"shouldShowHintSearchIcon")),(0,l.kt)("p",null,"Whether to show the search hint icon when search bar is focused. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"onblur"},(0,l.kt)("inlineCode",{parentName:"h5"},"onBlur")),(0,l.kt)("p",null,"A callback that gets called when search bar has lost focus."),(0,l.kt)("h5",{id:"oncancelbuttonpress"},(0,l.kt)("inlineCode",{parentName:"h5"},"onCancelButtonPress")),(0,l.kt)("p",null,"A callback that gets called when the cancel button is pressed."),(0,l.kt)("h5",{id:"onchangetext"},(0,l.kt)("inlineCode",{parentName:"h5"},"onChangeText")),(0,l.kt)("p",null,"A callback that gets called when the text changes. It receives the current text value of the search bar."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const [search, setSearch] = React.useState('');\n\nReact.useEffect(() => {\n  navigation.setOptions({\n    headerSearchBar: {\n      onChangeText: (event) => setSearch(event.nativeEvent.text),\n    }\n  });\n}, [navigation]);\n")),(0,l.kt)("h4",{id:"header"},(0,l.kt)("inlineCode",{parentName:"h4"},"header")),(0,l.kt)("p",null,"Custom header to use instead of the default header."),(0,l.kt)("p",null,"This accepts a function that returns a React Element to display as a header. The function receives an object containing the following properties as the argument:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"navigation")," - The navigation object for the current screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"route")," - The route object for the current screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options")," - The options for the current screen"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"back")," - Options for the back button, contains an object with a ",(0,l.kt)("inlineCode",{parentName:"li"},"title")," property to use for back button label.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options, back }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n")),(0,l.kt)("p",null,"To set a custom header for all the screens in the navigator, you can specify this option in the ",(0,l.kt)("inlineCode",{parentName:"p"},"screenOptions")," prop of the navigator."),(0,l.kt)("p",null,"Note that if you specify a custom header, the native functionality such as large title, search bar etc. won't work."),(0,l.kt)("h4",{id:"statusbaranimation"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarAnimation")),(0,l.kt)("p",null,"Sets the status bar animation (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component)."),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"statusbarhidden"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarHidden")),(0,l.kt)("p",null," Whether the status bar should be hidden on this screen."),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"statusbarstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarStyle")),(0,l.kt)("p",null,"Sets the status bar color (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component)."),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"contentstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"contentStyle")),(0,l.kt)("p",null,"Style object for the scene content."),(0,l.kt)("h4",{id:"gestureenabled"},(0,l.kt)("inlineCode",{parentName:"h4"},"gestureEnabled")),(0,l.kt)("p",null,"Whether you can use gestures to dismiss this screen. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),". Only supported on iOS."),(0,l.kt)("h4",{id:"animationtypeforreplace"},(0,l.kt)("inlineCode",{parentName:"h4"},"animationTypeForReplace")),(0,l.kt)("p",null,"The type of animation to use when this screen replaces another screen. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"pop"),"."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"push"),": the new screen will perform push animation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pop"),": the new screen will perform pop animation.")),(0,l.kt)("h4",{id:"animation"},(0,l.kt)("inlineCode",{parentName:"h4"},"animation")),(0,l.kt)("p",null,"How the screen should animate when pushed or popped."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default"),": use the platform default animation"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fade"),": fade screen in or out"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"flip"),': flip the screen, requires stackPresentation: "modal" (iOS only)'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slide_from_right"),": slide in the new screen from right (Android only, uses default animation on iOS)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slide_from_left"),": slide in the new screen from left (Android only, uses default animation on iOS)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"none"),": don't animate the screen")),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"presentation"},(0,l.kt)("inlineCode",{parentName:"h4"},"presentation")),(0,l.kt)("p",null,"How should the screen be presented."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"card"),": the new screen will be pushed onto a stack, which means the default animation will be slide from the side on iOS, the animation on Android will vary depending on the OS version and theme."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"modal"),": the new screen will be presented modally. this also allows for a nested stack to be rendered inside the screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transparentModal"),": the new screen will be presented modally, but in addition, the previous screen will stay so that the content below can still be seen if the screen has translucent background."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containedModal"),': will use "UIModalPresentationCurrentContext" modal style on iOS and will fallback to "modal" on Android.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containedTransparentModal"),': will use "UIModalPresentationOverCurrentContext" modal style on iOS and will fallback to "transparentModal" on Android.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fullScreenModal"),': will use "UIModalPresentationFullScreen" modal style on iOS and will fallback to "modal" on Android.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"formSheet"),': will use "UIModalPresentationFormSheet" modal style on iOS and will fallback to "modal" on Android.')),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"orientation"},(0,l.kt)("inlineCode",{parentName:"h4"},"orientation")),(0,l.kt)("p",null,"The display orientation to use for the screen."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default"),' - resolves to "all" without "portrait_down" on iOS. On Android, this lets the system decide the best orientation.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"all"),": all orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait"),": portrait orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait_up"),": right-side portrait orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait_down"),": upside-down portrait orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape"),": landscape orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape_left"),": landscape-left orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape_right"),": landscape-right orientation is permitted.")),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h3",{id:"events"},"Events"),(0,l.kt)("p",null,"The navigator can ",(0,l.kt)("a",{parentName:"p",href:"/docs/navigation-events"},"emit events")," on certain actions. Supported events are:"),(0,l.kt)("h4",{id:"transitionstart"},(0,l.kt)("inlineCode",{parentName:"h4"},"transitionStart")),(0,l.kt)("p",null,"This event is fired when the transition animation starts for the current screen."),(0,l.kt)("p",null,"Event data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e.data.closing")," - Boolean indicating whether the screen is being opened or closed.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n")),(0,l.kt)("h4",{id:"transitionend"},(0,l.kt)("inlineCode",{parentName:"h4"},"transitionEnd")),(0,l.kt)("p",null,"This event is fired when the transition animation ends for the current screen."),(0,l.kt)("p",null,"Event data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e.data.closing")," - Boolean indicating whether the screen was opened or closed.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n")),(0,l.kt)("h3",{id:"helpers"},"Helpers"),(0,l.kt)("p",null,"The native stack navigator adds the following methods to the navigation prop:"),(0,l.kt)("h4",{id:"push"},(0,l.kt)("inlineCode",{parentName:"h4"},"push")),(0,l.kt)("p",null,"Pushes a new screen to top of the stack and navigate to it. The method accepts following arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - ",(0,l.kt)("em",{parentName:"li"},"string")," - Name of the route to push onto the stack."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,l.kt)("em",{parentName:"li"},"object")," - Screen params to pass to the destination route.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.push('Profile', { owner: 'Micha\u015b' });\n")),(0,l.kt)("h4",{id:"pop"},(0,l.kt)("inlineCode",{parentName:"h4"},"pop")),(0,l.kt)("p",null,"Pops the current screen from the stack and navigates back to the previous screen. It takes one optional argument (",(0,l.kt)("inlineCode",{parentName:"p"},"count"),"), which allows you to specify how many screens to pop back by."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.pop();\n")),(0,l.kt)("h4",{id:"poptotop"},(0,l.kt)("inlineCode",{parentName:"h4"},"popToTop")),(0,l.kt)("p",null,"Pops all of the screens in the stack except the first one and navigates to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.popToTop();\n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        headerTintColor: 'white',\n        headerStyle: { backgroundColor: 'tomato' },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          title: 'Awesome app',\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          title: 'My profile',\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          gestureEnabled: false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n")))}k.isMDXComponent=!0}}]);