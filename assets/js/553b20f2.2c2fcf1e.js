"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[54591],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return v}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,v=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(v,o(o({ref:t},s),{},{components:n})):a.createElement(v,o({ref:t},s))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(86010),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(83117),r=n(67294),i=n(86010),o=n(12466),l=n(16550),c=n(91980),p=n(67392),s=n(50012);function u(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:u(n);return function(e){var t=(0,p.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function v(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,c._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function g(e){var t,n,a,i,o=e.defaultValue,l=e.queryString,c=void 0!==l&&l,p=e.groupId,u=d(e),g=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:u})})),f=g[0],k=g[1],N=v({queryString:c,groupId:p}),h=N[0],b=N[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),n=(0,s.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),C=y[0],S=y[1],T=function(){var e=null!=h?h:C;return m({value:e,tabValues:u})?e:null}();return(0,r.useLayoutEffect)((function(){T&&k(T)}),[T]),{selectedValue:f,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);k(e),b(e),S(e)}),[b,S,u]),tabValues:u}}var f=n(72389),k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){var t=e.className,n=e.block,l=e.selectedValue,c=e.selectValue,p=e.tabValues,s=[],u=(0,o.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=s.indexOf(t),a=p[n].value;a!==l&&(u(t),c(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,r=s.indexOf(e.currentTarget)+1;n=null!=(a=s[r])?a:s[0];break;case"ArrowLeft":var i,o=s.indexOf(e.currentTarget)-1;n=null!=(i=s[o])?i:s[s.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return s.push(e)},onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",k.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function h(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var i=n.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function b(e){var t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(h,(0,a.Z)({},e,t)))}function y(e){var t=(0,f.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},29535:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=(n(74866),n(85162),["components"]),l={id:"typescript",title:"Type checking with TypeScript",sidebar_label:"Type checking with TypeScript"},c=void 0,p={unversionedId:"typescript",id:"version-4.x/typescript",title:"Type checking with TypeScript",description:"React Navigation exports type definitions for TypeScript projects, which can be used to type check screens, navigation options, and the navigation prop.",source:"@site/versioned_docs/version-4.x/typescript.md",sourceDirName:".",slug:"/typescript",permalink:"/docs/4.x/typescript",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-4.x/typescript.md",tags:[],version:"4.x",frontMatter:{id:"typescript",title:"Type checking with TypeScript",sidebar_label:"Type checking with TypeScript"},sidebar:"version-4.x-docs",previous:{title:"State persistence",permalink:"/docs/4.x/state-persistence"},next:{title:"Redux integration",permalink:"/docs/4.x/redux-integration"}},s={},u=[{value:"Type checking <code>navigation</code> prop",id:"type-checking-navigation-prop",level:3},{value:"Type checking all props for a screen",id:"type-checking-all-props-for-a-screen",level:3},{value:"Type checking <code>navigationOptions</code>",id:"type-checking-navigationoptions",level:3},{value:"Type checking screen components",id:"type-checking-screen-components",level:3}],d={toc:u},m="wrapper";function v(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"React Navigation exports type definitions for TypeScript projects, which can be used to type check screens, navigation options, and the navigation prop."),(0,i.kt)("h3",{id:"type-checking-navigation-prop"},"Type checking ",(0,i.kt)("inlineCode",{parentName:"h3"},"navigation")," prop"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation")," prop can be annotated to provide type checking for params and basic type checking for the available methods."),(0,i.kt)("p",null,"The type depends on the navigator that renders the screen. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation")," prop provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"createStackNavigator")," can be used like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NavigationStackProp } from 'react-navigation-stack';\n\ntype Props = {\n  navigation: NavigationStackProp<{ userId: string }>;\n};\n\nclass ProfileScreen extends React.Component<Props> {\n  // ...\n}\n")),(0,i.kt)("p",null,"The types take a generic for the params object."),(0,i.kt)("p",null,"Along with ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationStackProp"),", each navigator exports its own type for navigation prop:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationStackProp")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createStackNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationTabProp")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createBottomTabNavigator")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"createMaterialTopTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationDrawerProp")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createDrawerNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-drawer"))),(0,i.kt)("h3",{id:"type-checking-all-props-for-a-screen"},"Type checking all props for a screen"),(0,i.kt)("p",null,"A screen receives the ",(0,i.kt)("inlineCode",{parentName:"p"},"theme")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"screenProps")," props along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation")," prop. Instead of needing to annotate each property, they can be consolidated."),(0,i.kt)("p",null,"The type depends on the navigator that renders the screen. For example, for a screen in ",(0,i.kt)("inlineCode",{parentName:"p"},"createStackNavigator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NavigationStackScreenProps } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nclass ProfileScreen extends React.Component<\n  NavigationStackScreenProps<Params, ScreenProps>\n> {\n  // ...\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ScreenProps")," generics are optional, and can be omitted if you're not using them."),(0,i.kt)("p",null,"Along with ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationStackScreenProps"),", each navigator exports its own type for navigation prop:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationStackScreenProps")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createStackNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationTabScreenProps")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createBottomTabNavigator")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"createMaterialTopTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationDrawerScreenProps")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createDrawerNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-drawer"))),(0,i.kt)("h3",{id:"type-checking-navigationoptions"},"Type checking ",(0,i.kt)("inlineCode",{parentName:"h3"},"navigationOptions")),(0,i.kt)("p",null,"Different navigators accept different set of options for the screen. They are specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"navigationOptions")," static property which can be annotated to provide type-checking:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NavigationStackOptions } from 'react-navigation-stack';\n\n// ...\n\nclass ProfileScreen extends React.Component<Props> {\n  static navigationOptions: NavigationStackOptions = {\n    headerTitle: 'Profile',\n  };\n\n  // ...\n}\n")),(0,i.kt)("p",null,"Along with ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationStackOptions"),", each navigator exports its own type for navigation prop:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationStackOptions")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createStackNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationBottomTabOptions")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createBottomTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationMaterialTabOptions")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createMaterialTopTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationDrawerOptions")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createDrawerNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-drawer"))),(0,i.kt)("h3",{id:"type-checking-screen-components"},"Type checking screen components"),(0,i.kt)("p",null,"Screens can be annotated to provide type-checking for the props it receives, as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"navigationOptions")," in a single type annotation."),(0,i.kt)("p",null,"The type depends on the navigator that renders the screen. For example, for a screen in ",(0,i.kt)("inlineCode",{parentName:"p"},"createStackNavigator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NavigationStackScreenComponent } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nconst ProfileScreen: NavigationStackScreenComponent<\n  Params,\n  ScreenProps\n> = props => {\n  // ...\n};\n\nProfileScreen.navigationOptions = {\n  headerTitle: 'Profile',\n};\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ScreenProps")," generics are optional, and can be omitted if you're not using them."),(0,i.kt)("p",null,"Along with ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationStackScreenComponent"),", each navigator exports its own type for navigation prop:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationStackScreenComponent")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createStackNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationBottomTabScreenComponent")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createBottomTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationMaterialTabScreenComponent")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createMaterialTopTabNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-tabs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationDrawerScreenComponent")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"createDrawerNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation-drawer"))))}v.isMDXComponent=!0}}]);