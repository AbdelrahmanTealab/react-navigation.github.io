(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[7715],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62618:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var r=n(74034),a=n(79973),o=(n(67294),n(3905)),i={id:"routers",title:"Routers",sidebar_label:"Routers"},s={unversionedId:"routers",id:"version-3.x/routers",isDocsHomePage:!1,title:"Routers",description:"Routers define a component's navigation state, and they allow the developer to define paths and actions that can be handled.",source:"@site/versioned_docs/version-3.x/routers.md",sourceDirName:".",slug:"/routers",permalink:"/docs/3.x/routers",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/routers.md",version:"3.x",sidebar_label:"Routers",frontMatter:{id:"routers",title:"Routers",sidebar_label:"Routers"},sidebar:"version-3.x-docs",previous:{title:"Overview",permalink:"/docs/3.x/custom-navigator-overview"},next:{title:"Custom navigators",permalink:"/docs/3.x/custom-navigators"}},c=[{value:"Built-In Routers",id:"built-in-routers",children:[]},{value:"Using Routers",id:"using-routers",children:[]},{value:"Customizing Routers",id:"customizing-routers",children:[{value:"Custom Navigation Actions",id:"custom-navigation-actions",children:[]},{value:"Blocking Navigation Actions",id:"blocking-navigation-actions",children:[]},{value:"Handling Custom URIs",id:"handling-custom-uris",children:[]}]}],u={toc:c};function l(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Routers define a component's navigation state, and they allow the developer to define paths and actions that can be handled."),(0,o.kt)("h2",{id:"built-in-routers"},"Built-In Routers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"react-navigation")," ships with a few standard routers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/react-navigation/react-navigation-core/blob/master/src/routers/StackRouter.js"},"StackRouter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/react-navigation/react-navigation-core/blob/master/src/routers/TabRouter.js"},"TabRouter"))),(0,o.kt)("h2",{id:"using-routers"},"Using Routers"),(0,o.kt)("p",null,"To make a navigator manually, put a static ",(0,o.kt)("inlineCode",{parentName:"p"},"router")," on a component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class MyNavigator extends React.Component {\n  static router = StackRouter(routes, config);\n  ...\n}\n")),(0,o.kt)("p",null,"Now you can use this component as a ",(0,o.kt)("inlineCode",{parentName:"p"},"screen")," in another navigator, and the navigation logic for ",(0,o.kt)("inlineCode",{parentName:"p"},"MyNavigator")," will be defined by this ",(0,o.kt)("inlineCode",{parentName:"p"},"StackRouter"),"."),(0,o.kt)("h2",{id:"customizing-routers"},"Customizing Routers"),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/3.x/custom-routers"},"Custom Router API spec")," to learn about the API of ",(0,o.kt)("inlineCode",{parentName:"p"},"StackRouter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TabRouter"),". You can override the router functions as you see fit:"),(0,o.kt)("h3",{id:"custom-navigation-actions"},"Custom Navigation Actions"),(0,o.kt)("p",null,"To override navigation behavior, you can override the navigation state logic in ",(0,o.kt)("inlineCode",{parentName:"p"},"getStateForAction"),", and manually manipulate the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const MyApp = createStackNavigator({\n  Home: { screen: HomeScreen },\n  Profile: { screen: ProfileScreen },\n}, {\n  initialRouteName: 'Home',\n})\n\nconst defaultGetStateForAction = MyApp.router.getStateForAction;\n\nMyApp.router.getStateForAction = (action, state) => {\n  if (state && action.type === 'PushTwoProfiles') {\n    const routes = [\n      ...state.routes,\n      {key: 'A', routeName: 'Profile', params: { name: action.name1 }},\n      {key: 'B', routeName: 'Profile', params: { name: action.name2 }},\n    ];\n    return {\n      ...state,\n      routes,\n      index: routes.length - 1,\n    };\n  }\n  return defaultGetStateForAction(action, state);\n};\n")),(0,o.kt)("h3",{id:"blocking-navigation-actions"},"Blocking Navigation Actions"),(0,o.kt)("p",null,"Sometimes you may want to prevent some navigation activity, depending on your route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation'\n\nconst MyStackRouter = StackRouter({\n  Home: { screen: HomeScreen },\n  Profile: { screen: ProfileScreen },\n}, {\n  initialRouteName: 'Home',\n})\n\nconst defaultGetStateForAction = MyStackRouter.router.getStateForAction;\n\nMyStackRouter.router.getStateForAction = (action, state) => {\n  if (\n    state &&\n    action.type === NavigationActions.BACK &&\n    state.routes[state.index].params.isEditing\n  ) {\n    // Returning null from getStateForAction means that the action\n    // has been handled/blocked, but there is not a new state\n    return null;\n  }\n\n  return defaultGetStateForAction(action, state);\n};\n")),(0,o.kt)("h3",{id:"handling-custom-uris"},"Handling Custom URIs"),(0,o.kt)("p",null,"Perhaps your app has a unique URI which the built-in routers cannot handle. You can always extend the router ",(0,o.kt)("inlineCode",{parentName:"p"},"getActionForPathAndParams"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation'\n\nconst MyApp = createStackNavigator({\n  Home: { screen: HomeScreen },\n  Profile: { screen: ProfileScreen },\n}, {\n  initialRouteName: 'Home',\n})\nconst previousGetActionForPathAndParams = MyApp.router.getActionForPathAndParams;\n\nObject.assign(MyApp.router, {\n  getActionForPathAndParams(path, params) {\n    if (\n      path === 'my/custom/path' &&\n      params.magic === 'yes'\n    ) {\n      // returns a profile navigate action for /my/custom/path?magic=yes\n      return NavigationActions.navigate({\n        routeName: 'Profile',\n        action: NavigationActions.navigate({\n          // This child action will get passed to the child router\n          // ProfileScreen.router.getStateForAction to get the child\n          // navigation state.\n          routeName: 'Friends',\n        }),\n      });\n    }\n    return previousGetActionForPathAndParams(path, params);\n  },\n});\n")))}l.isMDXComponent=!0}}]);