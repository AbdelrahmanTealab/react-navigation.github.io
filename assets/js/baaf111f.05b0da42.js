"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[44484],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(a),h=r,d=u["".concat(p,".").concat(h)]||u[h]||c[h]||o;return a?n.createElement(d,i(i({ref:t},m),{},{components:a})):n.createElement(d,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},11116:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],s={id:"params",title:"Passing parameters to routes",sidebar_label:"Passing parameters to routes"},p=void 0,l={unversionedId:"params",id:"version-2.x/params",isDocsHomePage:!1,title:"Passing parameters to routes",description:'Remember when I said "more on that later when we talk about params!"? Well, the time has come.',source:"@site/versioned_docs/version-2.x/params.md",sourceDirName:".",slug:"/params",permalink:"/docs/2.x/params",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/params.md",tags:[],version:"2.x",frontMatter:{id:"params",title:"Passing parameters to routes",sidebar_label:"Passing parameters to routes"},sidebar:"version-2.x-docs",previous:{title:"Navigation lifecycle",permalink:"/docs/2.x/navigation-lifecycle"},next:{title:"Configuring the header bar",permalink:"/docs/2.x/headers"}},m=[{value:"Summary",id:"summary",children:[],level:2}],c={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Remember when I said "more on that later when we talk about ',(0,o.kt)("inlineCode",{parentName:"p"},"params"),'!"? Well, the time has come.'),(0,o.kt)("p",null,"Now that we know how to ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.x/hello-react-navigation"},"create a stack navigator with some routes")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.x/navigating"},"navigate between those routes"),", let's look at how we can pass data to routes when we navigate to them."),(0,o.kt)("p",null,"There are two pieces to this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Pass params to a route by putting them in an object as a second parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.navigate")," function: ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.navigation.navigate('RouteName', { /* params go here */ })"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Read the params in your screen component: ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.navigation.getParam(paramName, defaultValue)"),"."))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We recommend that the params you pass are JSON-serializable. That way, you'll be able to use ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.x/state-persistence"},"state persistence")," and your screen components will have the right contract for implementing ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.x/deep-linking"},"deep linking"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={() => {\n            /* 1. Navigate to the Details route with params */\n            this.props.navigation.navigate('Details', {\n              itemId: 86,\n              otherParam: 'anything you want here',\n            });\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nclass DetailsScreen extends React.Component {\n  render() {\n    /* 2. Get the param, provide a fallback value if not available */\n    const { navigation } = this.props;\n    const itemId = navigation.getParam('itemId', 'NO-ID');\n    const otherParam = navigation.getParam('otherParam', 'some default value');\n\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Text>itemId: {JSON.stringify(itemId)}</Text>\n        <Text>otherParam: {JSON.stringify(otherParam)}</Text>\n        <Button\n          title=\"Go to Details... again\"\n          onPress={() =>\n            this.props.navigation.push('Details', {\n              itemId: Math.floor(Math.random() * 100),\n            })}\n        />\n        <Button\n          title=\"Go to Home\"\n          onPress={() => this.props.navigation.navigate('Home')}\n        />\n        <Button\n          title=\"Go back\"\n          onPress={() => this.props.navigation.goBack()}\n        />\n      </View>\n    );\n  }\n}\n")),(0,o.kt)("a",{href:"https://snack.expo.io/@react-navigation/navigate-with-params-v2",target:"blank",class:"run-code-button"},"\u2192 Run this code"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can also directly access the params object with ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.navigation.state.params"),". This may be ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," if no params were supplied, and so it's usually easier to just use ",(0,o.kt)("inlineCode",{parentName:"p"},"getParam")," so you don't have to deal with that case.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you want to access the params directly through props (eg. ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.itemId"),") rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"this.props.navigation.getParam"),", you may use a community-developed ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vonovak/react-navigation-props-mapper"},"react-navigation-props-mapper")," package.")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"navigate")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"push")," accept an optional second argument to let you pass parameters to the route you are navigating to. For example: ",(0,o.kt)("inlineCode",{parentName:"li"},"this.props.navigation.navigate('RouteName', {paramName: 'value'})"),"."),(0,o.kt)("li",{parentName:"ul"},"You can read the params through ",(0,o.kt)("inlineCode",{parentName:"li"},"this.props.navigation.getParam")),(0,o.kt)("li",{parentName:"ul"},"As an alternative to ",(0,o.kt)("inlineCode",{parentName:"li"},"getParam"),", you may use ",(0,o.kt)("inlineCode",{parentName:"li"},"this.props.navigation.state.params"),". It is ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," if no parameters are specified."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://snack.expo.io/@react-navigation/navigate-with-params-v2"},"Full source of what we have built so far"),".")))}u.isMDXComponent=!0}}]);