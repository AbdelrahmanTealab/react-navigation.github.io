"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[93480],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80419:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],l={id:"stack-actions",title:"StackActions reference",sidebar_label:"StackActions"},p=void 0,s={unversionedId:"stack-actions",id:"version-3.x/stack-actions",isDocsHomePage:!1,title:"StackActions reference",description:"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in NavigationActions.",source:"@site/versioned_docs/version-3.x/stack-actions.md",sourceDirName:".",slug:"/stack-actions",permalink:"/docs/3.x/stack-actions",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/stack-actions.md",tags:[],version:"3.x",frontMatter:{id:"stack-actions",title:"StackActions reference",sidebar_label:"StackActions"},sidebar:"version-3.x-docs",previous:{title:"NavigationActions",permalink:"/docs/3.x/navigation-actions"},next:{title:"SwitchActions",permalink:"/docs/3.x/switch-actions"}},c=[{value:"reset",id:"reset",children:[{value:"How to use the <code>index</code> parameter",id:"how-to-use-the-index-parameter",children:[],level:4}],level:3},{value:"replace",id:"replace",children:[],level:3},{value:"push",id:"push",children:[],level:3},{value:"pop",id:"pop",children:[],level:3},{value:"popToTop",id:"poptotop",children:[],level:3}],u={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"StackActions")," is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in ",(0,o.kt)("a",{parentName:"p",href:"/docs/3.x/navigation-actions"},(0,o.kt)("inlineCode",{parentName:"a"},"NavigationActions")),"."),(0,o.kt)("p",null,"The following actions are supported:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#reset"},"Reset")," - Replace current state with a new state"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#replace"},"Replace")," - Replace a route at a given key with another route"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#push"},"Push")," - Add a route on the top of the stack, and navigate forward to it"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#pop"},"Pop")," - Navigate back to previous routes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#poptotop"},"PopToTop")," - Navigate to the top route of the stack, dismissing all other routes")),(0,o.kt)("h3",{id:"reset"},"reset"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"reset")," action wipes the whole navigation state and replaces it with the result of several actions."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"index")," - ",(0,o.kt)("em",{parentName:"li"},"number")," - required - Index of the active route on ",(0,o.kt)("inlineCode",{parentName:"li"},"routes")," array in navigation ",(0,o.kt)("inlineCode",{parentName:"li"},"state"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"actions")," - ",(0,o.kt)("em",{parentName:"li"},"array")," - required - Array of Navigation Actions that will replace the navigation state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,o.kt)("em",{parentName:"li"},"string or null")," - optional - If set, the navigator with the given key will reset. If null, the root navigator will reset.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n")),(0,o.kt)("h4",{id:"how-to-use-the-index-parameter"},"How to use the ",(0,o.kt)("inlineCode",{parentName:"h4"},"index")," parameter"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," param is used to specify the current active route."),(0,o.kt)("p",null,"eg: given a basic stack navigation with two routes ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Settings"),".\nTo reset the state to a point where the active screen was ",(0,o.kt)("inlineCode",{parentName:"p"},"Settings")," but have it stacked on top of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," screen, you would do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n")),(0,o.kt)("h3",{id:"replace"},"replace"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"replace")," action replaces the route at the given key with another route."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,o.kt)("em",{parentName:"li"},"string")," - Key of the route to replace. If this is not defined, the most recent route will be replaced."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"newKey")," - ",(0,o.kt)("em",{parentName:"li"},"string")," - Key to use for the replacement route. Generated automatically if not provided."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"routeName")," - ",(0,o.kt)("em",{parentName:"li"},"string")," - ",(0,o.kt)("inlineCode",{parentName:"li"},"routeName")," to use for replacement route."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,o.kt)("em",{parentName:"li"},"object")," - Parameters to pass in to the replacement route."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"action")," - ",(0,o.kt)("em",{parentName:"li"},"object")," - Optional sub-action."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"immediate"),(0,o.kt)("em",{parentName:"li"}," - ",(0,o.kt)("em",{parentName:"em"},"boolean")," - "),"Currently has no effect, this is a placeholder for when stack navigator supports animated replace (it currently does not).")),(0,o.kt)("h3",{id:"push"},"push"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"push")," action adds a route on top of the stack and navigates forward to it. This differs from ",(0,o.kt)("inlineCode",{parentName:"p"},"navigate")," in that ",(0,o.kt)("inlineCode",{parentName:"p"},"navigate")," will pop back to earlier in the stack if a route of the given name is already present there. ",(0,o.kt)("inlineCode",{parentName:"p"},"push")," will always add on top, so a route can be present multiple times."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"routeName")," - ",(0,o.kt)("em",{parentName:"li"},"string")," - ",(0,o.kt)("inlineCode",{parentName:"li"},"routeName")," to push onto the stack."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,o.kt)("em",{parentName:"li"},"object")," - Screen params to merge into the destination route (found in the pushed screen through ",(0,o.kt)("inlineCode",{parentName:"li"},"this.props.navigation.state.params"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"action")," - (advanced) The sub-action to run in the child router, if the screen is a navigator.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from 'react-navigation';\n\nconst pushAction = StackActions.push({\n  routeName: 'Profile',\n  params: {\n    myUserId: 9,\n  },\n});\n\nthis.props.navigation.dispatch(pushAction);\n")),(0,o.kt)("h3",{id:"pop"},"pop"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"pop")," action takes you back to a previous screen in the stack. The ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," param allows you to specify how many screens to pop back by."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n")," - ",(0,o.kt)("em",{parentName:"li"},"number")," - The number of screens to pop back by.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from 'react-navigation';\n\nconst popAction = StackActions.pop({\n  n: 1,\n});\n\nthis.props.navigation.dispatch(popAction);\n")),(0,o.kt)("h3",{id:"poptotop"},"popToTop"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"popToTop")," action takes you back to the first screen in the stack, dismissing all the others. It's functionally identical to ",(0,o.kt)("inlineCode",{parentName:"p"},"StackActions.pop({n: currentIndex})"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(StackActions.popToTop());\n")))}m.isMDXComponent=!0}}]);