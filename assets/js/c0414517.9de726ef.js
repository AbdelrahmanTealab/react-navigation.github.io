(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[7991],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return n?a.createElement(d,r(r({ref:t},u),{},{components:n})):a.createElement(d,r({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62908:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var a=n(74034),o=n(79973),i=(n(67294),n(3905)),r={id:"localization",title:"Localization",sidebar_label:"Localization"},l={unversionedId:"localization",id:"version-5.x/localization",isDocsHomePage:!1,title:"Localization",description:"English is only one of many languages people speak around the world (thanks a lot, Tower of Babel) and it's polite and sometimes even necessary to translate our app to the languages our users speak. Let's look at one way we can do this in React Navigation - it's not the only way but it'll do the trick. Similar to themes, we will use React's context API in order to make it easier to access the translate function from a variety of components.",source:"@site/versioned_docs/version-5.x/localization.md",sourceDirName:".",slug:"/localization",permalink:"/docs/localization",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/localization.md",version:"5.x",sidebar_label:"Localization",frontMatter:{id:"localization",title:"Localization",sidebar_label:"Localization"},sidebar:"version-5.x/docs",previous:{title:"Integrating with MobX State Tree",permalink:"/docs/MST-integration"},next:{title:"Optimize memory usage and performance",permalink:"/docs/react-native-screens"}},c=[{value:"Setting up a localization library",id:"setting-up-a-localization-library",children:[]},{value:"Wiring up your localization library to navigation",id:"wiring-up-your-localization-library-to-navigation",children:[]}],s={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"English is only one of many languages people speak around the world (thanks a lot, ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tower_of_Babel"},"Tower of Babel"),") and it's polite and sometimes even necessary to translate our app to the languages our users speak. Let's look at one way we can do this in React Navigation - it's not the only way but it'll do the trick. Similar to ",(0,i.kt)("a",{parentName:"p",href:"/docs/themes"},"themes"),", we will use React's context API in order to make it easier to access the translate function from a variety of components."),(0,i.kt)("h2",{id:"setting-up-a-localization-library"},"Setting up a localization library"),(0,i.kt)("p",null,"We'll need to use some kind of library to store our translations and provide a function that gives us access to them, along with handling fallbacks when we don't have a particular language defined. Localization and internationalization (i18n) are often used interchangeably, as in the example below where we get the current ",(0,i.kt)("inlineCode",{parentName:"p"},"locale")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-localization")," and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"i18n-js")," library for managing translations, for no particular reason other than it was available - use whatever you like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as Localization from 'expo-localization'; // or whatever library you want\nimport i18n from 'i18n-js'; // or whatever library you want\n\nconst en = {\n  foo: 'Foo',\n  bar: 'Bar {{someValue}}',\n};\n\nconst fr = {\n  foo: 'Fou',\n  bar: 'B\xe1r {{someValue}}',\n};\n\ni18n.fallbacks = true;\ni18n.translations = { fr, en };\n\n// This will log 'en' for me, as I'm an English speaker\nconsole.log(Localization.locale);\n")),(0,i.kt)("h2",{id:"wiring-up-your-localization-library-to-navigation"},"Wiring up your localization library to navigation"),(0,i.kt)("p",null,"Next let's store our ",(0,i.kt)("inlineCode",{parentName:"p"},"locale")," in the state of our root app component and then thread it through ",(0,i.kt)("inlineCode",{parentName:"p"},"LocalizationContext")," to make it available throughout our app."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export const LocalizationContext = React.createContext();\n\nexport default function App() {\n  const [locale, setLocale] = React.useState(Localization.locale);\n  const localizationContext = React.useMemo(\n    () => ({\n      t: (scope, options) => i18n.t(scope, { locale, ...options }),\n      locale,\n      setLocale,\n    }),\n    [locale]\n  );\n\n  return (\n    <LocalizationContext.Provider value={localizationContext}>\n      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n    </LocalizationContext.Provider>\n  );\n}\n")),(0,i.kt)("p",null,"Now in our screens we can use these ",(0,i.kt)("inlineCode",{parentName:"p"},"LocalizationContext")," as follows:"),(0,i.kt)("samp",{id:"localization"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function MyScreen() {\n  const { t, locale, setLocale } = React.useContext(LocalizationContext);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        Current locale: {locale}.{' '}\n        {locale !== 'en' && locale !== 'fr'\n          ? 'Translations will fall back to \"en\" because none available'\n          : null}\n      </Text>\n      <Text>{t('bar', { someValue: Date.now() })}</Text>\n      {locale === 'en' ? (\n        <Button title=\"Switch to French\" onPress={() => setLocale('fr')} />\n      ) : (\n        <Button title=\"Switch to English\" onPress={() => setLocale('en')} />\n      )}\n    </View>\n  );\n}\n")),(0,i.kt)("p",null,"We can also use it for screen options:"),(0,i.kt)("samp",{id:"localization-with-title"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function MyStack() {\n  const { t } = React.useContext(LocalizationContext);\n\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Home\"\n        component={MyScreen}\n        options={{ title: t('foo') }}\n      />\n    </Stack.Navigator>\n  );\n}\n")),(0,i.kt)("p",null,"Refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/themes"},"themes")," and the ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React documentation on context")," for help."))}u.isMDXComponent=!0}}]);