"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[95801],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,k=u["".concat(d,".").concat(h)]||u[h]||c[h]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=h;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),i=n(86010),l={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l.tabItem,o),hidden:n},t)}},74866:function(e,t,n){n.d(t,{Z:function(){return C}});var a=n(83117),i=n(67294),l=n(86010),o=n(12466),r=n(16550),d=n(91980),s=n(67392),p=n(50012);function u(e){return function(e){return i.Children.map(e,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function c(e){var t=e.values,n=e.children;return(0,i.useMemo)((function(){var e=null!=t?t:u(n);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function h(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function k(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,l=(0,r.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,d._X)(o),(0,i.useCallback)((function(e){if(o){var t=new URLSearchParams(l.location.search);t.set(o,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[o,l])]}function m(e){var t,n,a,l,o=e.defaultValue,r=e.queryString,d=void 0!==r&&r,s=e.groupId,u=c(e),m=(0,i.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var i=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:o,tabValues:u})})),v=m[0],f=m[1],N=k({queryString:d,groupId:s}),g=N[0],b=N[1],C=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,p.Nk)(t),a=n[0],l=n[1],[a,(0,i.useCallback)((function(e){t&&l.set(e)}),[t,l])]),y=C[0],S=C[1],w=function(){var e=null!=g?g:y;return h({value:e,tabValues:u})?e:null}();return(0,i.useLayoutEffect)((function(){w&&f(w)}),[w]),{selectedValue:v,selectValue:(0,i.useCallback)((function(e){if(!h({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);f(e),b(e),S(e)}),[b,S,u]),tabValues:u}}var v=n(72389),f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){var t=e.className,n=e.block,r=e.selectedValue,d=e.selectValue,s=e.tabValues,p=[],u=(0,o.o5)().blockElementScrollPositionUntilNextRender,c=function(e){var t=e.currentTarget,n=p.indexOf(t),a=s[n].value;a!==r&&(u(t),d(a))},h=function(e){var t,n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var a,i=p.indexOf(e.currentTarget)+1;n=null!=(a=p[i])?a:p[0];break;case"ArrowLeft":var l,o=p.indexOf(e.currentTarget)-1;n=null!=(l=p[o])?l:p[p.length-1]}null==(t=n)||t.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},s.map((function(e){var t=e.value,n=e.label,o=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:function(e){return p.push(e)},onKeyDown:h,onClick:c},o,{className:(0,l.Z)("tabs__item",f.tabItem,null==o?void 0:o.className,{"tabs__item--active":r===t})}),null!=n?n:t)})))}function g(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var l=n.find((function(e){return e.props.value===a}));return l?(0,i.cloneElement)(l,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function b(e){var t=m(e);return i.createElement("div",{className:(0,l.Z)("tabs-container",f.tabList)},i.createElement(N,(0,a.Z)({},e,t)),i.createElement(g,(0,a.Z)({},e,t)))}function C(e){var t=(0,v.Z)();return i.createElement(b,(0,a.Z)({key:String(t)},e))}},63224:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return v},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var a=n(83117),i=n(80102),l=(n(67294),n(3905)),o=n(74866),r=n(85162),d=["components"],s={id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},p=void 0,u={unversionedId:"native-stack-navigator",id:"version-6.x/native-stack-navigator",title:"Native Stack Navigator",description:"Native Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-6.x/native-stack-navigator.md",sourceDirName:".",slug:"/native-stack-navigator",permalink:"/docs/native-stack-navigator",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/native-stack-navigator.md",tags:[],version:"6.x",frontMatter:{id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},sidebar:"version-6.x/docs",previous:{title:"Stack",permalink:"/docs/stack-navigator"},next:{title:"Drawer",permalink:"/docs/drawer-navigator"}},c={},h=[{value:"Installation",id:"installation",level:2},{value:"API Definition",id:"api-definition",level:2},{value:"Props",id:"props",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>initialRouteName</code>",id:"initialroutename",level:4},{value:"<code>screenOptions</code>",id:"screenoptions",level:4},{value:"Options",id:"options",level:3},{value:"<code>title</code>",id:"title",level:4},{value:"<code>headerBackButtonMenuEnabled</code>",id:"headerbackbuttonmenuenabled",level:4},{value:"<code>headerBackVisible</code>",id:"headerbackvisible",level:4},{value:"<code>headerBackTitle</code>",id:"headerbacktitle",level:4},{value:"<code>headerBackTitleVisible</code>",id:"headerbacktitlevisible",level:4},{value:"<code>headerBackTitleStyle</code>",id:"headerbacktitlestyle",level:4},{value:"<code>headerBackImageSource</code>",id:"headerbackimagesource",level:4},{value:"<code>headerLargeStyle</code>",id:"headerlargestyle",level:4},{value:"<code>headerLargeTitle</code>",id:"headerlargetitle",level:4},{value:"<code>headerLargeTitleShadowVisible</code>",id:"headerlargetitleshadowvisible",level:4},{value:"<code>headerLargeTitleStyle</code>",id:"headerlargetitlestyle",level:4},{value:"<code>headerShown</code>",id:"headershown",level:4},{value:"<code>headerStyle</code>",id:"headerstyle",level:4},{value:"<code>headerShadowVisible</code>",id:"headershadowvisible",level:4},{value:"<code>headerTransparent</code>",id:"headertransparent",level:4},{value:"<code>headerBlurEffect</code>",id:"headerblureffect",level:4},{value:"<code>headerBackground</code>",id:"headerbackground",level:4},{value:"<code>headerTintColor</code>",id:"headertintcolor",level:4},{value:"<code>headerLeft</code>",id:"headerleft",level:4},{value:"<code>headerRight</code>",id:"headerright",level:4},{value:"<code>headerTitle</code>",id:"headertitle",level:4},{value:"<code>headerTitleAlign</code>",id:"headertitlealign",level:4},{value:"<code>headerTitleStyle</code>",id:"headertitlestyle",level:4},{value:"<code>headerSearchBarOptions</code>",id:"headersearchbaroptions",level:4},{value:"<code>autoCapitalize</code>",id:"autocapitalize",level:5},{value:"<code>autoFocus</code>",id:"autofocus",level:5},{value:"<code>barTintColor</code>",id:"bartintcolor",level:5},{value:"<code>tintColor</code>",id:"tintcolor",level:5},{value:"<code>cancelButtonText</code>",id:"cancelbuttontext",level:5},{value:"<code>disableBackButtonOverride</code>",id:"disablebackbuttonoverride",level:5},{value:"<code>hideNavigationBar</code>",id:"hidenavigationbar",level:5},{value:"<code>hideWhenScrolling</code>",id:"hidewhenscrolling",level:5},{value:"<code>inputType</code>",id:"inputtype",level:5},{value:"<code>obscureBackground</code>",id:"obscurebackground",level:5},{value:"<code>placeholder</code>",id:"placeholder",level:5},{value:"<code>textColor</code>",id:"textcolor",level:5},{value:"<code>hintTextColor</code>",id:"hinttextcolor",level:5},{value:"<code>headerIconColor</code>",id:"headericoncolor",level:5},{value:"<code>shouldShowHintSearchIcon</code>",id:"shouldshowhintsearchicon",level:5},{value:"<code>onBlur</code>",id:"onblur",level:5},{value:"<code>onCancelButtonPress</code>",id:"oncancelbuttonpress",level:5},{value:"<code>onChangeText</code>",id:"onchangetext",level:5},{value:"<code>header</code>",id:"header",level:4},{value:"<code>statusBarAnimation</code>",id:"statusbaranimation",level:4},{value:"<code>statusBarHidden</code>",id:"statusbarhidden",level:4},{value:"<code>statusBarStyle</code>",id:"statusbarstyle",level:4},{value:"<code>statusBarColor</code>",id:"statusbarcolor",level:4},{value:"<code>statusBarTranslucent</code>",id:"statusbartranslucent",level:4},{value:"<code>contentStyle</code>",id:"contentstyle",level:4},{value:"<code>customAnimationOnGesture</code>",id:"customanimationongesture",level:4},{value:"<code>fullScreenGestureEnabled</code>",id:"fullscreengestureenabled",level:4},{value:"<code>gestureEnabled</code>",id:"gestureenabled",level:4},{value:"<code>animationTypeForReplace</code>",id:"animationtypeforreplace",level:4},{value:"<code>animation</code>",id:"animation",level:4},{value:"<code>presentation</code>",id:"presentation",level:4},{value:"<code>orientation</code>",id:"orientation",level:4},{value:"<code>autoHideHomeIndicator</code>",id:"autohidehomeindicator",level:4},{value:"<code>gestureDirection</code>",id:"gesturedirection",level:4},{value:"<code>animationDuration</code>",id:"animationduration",level:4},{value:"<code>navigationBarColor</code>",id:"navigationbarcolor",level:4},{value:"<code>navigationBarHidden</code>",id:"navigationbarhidden",level:4},{value:"<code>freezeOnBlur</code>",id:"freezeonblur",level:4},{value:"Events",id:"events",level:3},{value:"<code>transitionStart</code>",id:"transitionstart",level:4},{value:"<code>transitionEnd</code>",id:"transitionend",level:4},{value:"Helpers",id:"helpers",level:3},{value:"<code>replace</code>",id:"replace",level:4},{value:"<code>push</code>",id:"push",level:4},{value:"<code>pop</code>",id:"pop",level:4},{value:"<code>popToTop</code>",id:"poptotop",level:4},{value:"Example",id:"example",level:2}],k={toc:h},m="wrapper";function v(e){var t=e.components,n=(0,i.Z)(e,d);return(0,l.kt)(m,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Native Stack Navigator provides a way for your app to transition between screens where each new screen is placed on top of a stack."),(0,l.kt)("p",null,"This navigator uses the native APIs ",(0,l.kt)("inlineCode",{parentName:"p"},"UINavigationController")," on iOS and ",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment")," on Android so that navigation built with ",(0,l.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," will behave exactly the same and have the same performance characteristics as apps built natively on top of those APIs. It also offers basic Web support using ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/necolas/react-native-web"},(0,l.kt)("inlineCode",{parentName:"a"},"react-native-web")),"."),(0,l.kt)("p",null,"One thing to keep in mind is that while ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/native-stack")," offers native performance and exposes native features such as large title on iOS etc., it may not be as customizable as ",(0,l.kt)("a",{parentName:"p",href:"/docs/stack-navigator"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/stack"))," depending on your needs. So if you need more customization than what's possible in this navigator, consider using ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/stack")," instead - which is a more customizable JavaScript based implementation."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"To use this navigator, ensure that you have ",(0,l.kt)("a",{parentName:"p",href:"/docs/getting-started"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/native")," and its dependencies (follow this guide)"),", then install ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/main/packages/native-stack"},(0,l.kt)("inlineCode",{parentName:"a"},"@react-navigation/native-stack")),":"),(0,l.kt)(o.Z,{defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-navigation/native-stack\n"))),(0,l.kt)(r.Z,{value:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @react-navigation/native-stack\n")))),(0,l.kt)("h2",{id:"api-definition"},"API Definition"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 If you encounter any bugs while using ",(0,l.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator"),", please open issues on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-screens"},(0,l.kt)("inlineCode",{parentName:"a"},"react-native-screens"))," rather than the ",(0,l.kt)("inlineCode",{parentName:"p"},"react-navigation")," repository!")),(0,l.kt)("p",null,"To use this navigator, import it from ",(0,l.kt)("inlineCode",{parentName:"p"},"@react-navigation/native-stack"),":"),(0,l.kt)("samp",{id:"simple-native-stack"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { createNativeStackNavigator } from \'@react-navigation/native-stack\';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name="Home" component={Home} />\n      <Stack.Screen name="Notifications" component={Notifications} />\n      <Stack.Screen name="Profile" component={Profile} />\n      <Stack.Screen name="Settings" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n')),(0,l.kt)("h3",{id:"props"},"Props"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Stack.Navigator")," component accepts following props:"),(0,l.kt)("h4",{id:"id"},(0,l.kt)("inlineCode",{parentName:"h4"},"id")),(0,l.kt)("p",null,"Optional unique ID for the navigator. This can be used with ",(0,l.kt)("a",{parentName:"p",href:"/docs/navigation-prop#getparent"},(0,l.kt)("inlineCode",{parentName:"a"},"navigation.getParent"))," to refer to this navigator in a child navigator."),(0,l.kt)("h4",{id:"initialroutename"},(0,l.kt)("inlineCode",{parentName:"h4"},"initialRouteName")),(0,l.kt)("p",null,"The name of the route to render on first load of the navigator."),(0,l.kt)("h4",{id:"screenoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"screenOptions")),(0,l.kt)("p",null,"Default options to use for the screens in the navigator."),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"The following ",(0,l.kt)("a",{parentName:"p",href:"/docs/screen-options"},"options")," can be used to configure the screens in the navigator:"),(0,l.kt)("h4",{id:"title"},(0,l.kt)("inlineCode",{parentName:"h4"},"title")),(0,l.kt)("p",null,"String that can be used as a fallback for ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTitle"),"."),(0,l.kt)("h4",{id:"headerbackbuttonmenuenabled"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackButtonMenuEnabled")),(0,l.kt)("p",null,"Boolean indicating whether to show the menu on longPress of iOS >= 14 back button. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Requires ",(0,l.kt)("inlineCode",{parentName:"p"},"react-native-screens")," version >=3.3.0."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbackvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackVisible")),(0,l.kt)("p",null,"Whether the back button is visible in the header. You can use it to show a back button alongside ",(0,l.kt)("inlineCode",{parentName:"p"},"headerLeft")," if you have specified it."),(0,l.kt)("p",null,"This will have no effect on the first screen in the stack."),(0,l.kt)("h4",{id:"headerbacktitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitle")),(0,l.kt)("p",null,"Title string used by the back button on iOS. Defaults to the previous scene's title, or \"Back\" if there's not enough space. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"headerBackTitleVisible: false")," to hide it."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbacktitlevisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitleVisible")),(0,l.kt)("p",null,"Whether the back button title should be visible or not."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbacktitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackTitleStyle")),(0,l.kt)("p",null,"Style object for header back title. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbackimagesource"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackImageSource")),(0,l.kt)("p",null,"Image to display in the header as the icon in the back button. Defaults to back icon image for the platform"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A chevron on iOS"),(0,l.kt)("li",{parentName:"ul"},"An arrow on Android")),(0,l.kt)("h4",{id:"headerlargestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeStyle")),(0,l.kt)("p",null,"Style of the header when a large title is shown. The large title is shown if ",(0,l.kt)("inlineCode",{parentName:"p"},"headerLargeTitle")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," and the edge of any scrollable content reaches the matching edge of the header."),(0,l.kt)("p",null,"Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"backgroundColor")),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerlargetitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitle")),(0,l.kt)("p",null,"Whether to enable header with large title which collapses to regular header on scroll."),(0,l.kt)("p",null,"For large title to collapse on scroll, the content of the screen should be wrapped in a scrollable view such as ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList"),". If the scrollable area doesn't fill the screen, the large title won't collapse on scroll. You also need to specify ",(0,l.kt)("inlineCode",{parentName:"p"},'contentInsetAdjustmentBehavior="automatic"')," in your ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList")," etc."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerlargetitleshadowvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitleShadowVisible")),(0,l.kt)("p",null,"Whether drop shadow of header is visible when a large title is shown."),(0,l.kt)("h4",{id:"headerlargetitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLargeTitleStyle")),(0,l.kt)("p",null,"Style object for large title in header. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontWeight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headershown"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerShown")),(0,l.kt)("p",null,"Whether to show the header. The header is shown by default. Setting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," hides the header."),(0,l.kt)("h4",{id:"headerstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerStyle")),(0,l.kt)("p",null,"Style object for header. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"backgroundColor"))),(0,l.kt)("h4",{id:"headershadowvisible"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerShadowVisible")),(0,l.kt)("p",null,"Whether to hide the elevation shadow (Android) or the bottom border (iOS) on the header."),(0,l.kt)("h4",{id:"headertransparent"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTransparent")),(0,l.kt)("p",null,"Boolean indicating whether the navigation bar is translucent."),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Setting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," makes the header absolutely positioned - so that the header floats over the screen so that it overlaps the content underneath, and changes the background color to ",(0,l.kt)("inlineCode",{parentName:"p"},"transparent")," unless specified in ",(0,l.kt)("inlineCode",{parentName:"p"},"headerStyle"),"."),(0,l.kt)("p",null,"This is useful if you want to render a semi-transparent header or a blurred background."),(0,l.kt)("p",null,"Note that if you don't want your content to appear under the header, you need to manually add a top margin to your content. React Navigation won't do it automatically."),(0,l.kt)("p",null,"To get the height of the header, you can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/elements#headerheightcontext"},(0,l.kt)("inlineCode",{parentName:"a"},"HeaderHeightContext"))," with ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html#contextconsumer"},"React's Context API")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/elements#useheaderheight"},(0,l.kt)("inlineCode",{parentName:"a"},"useHeaderHeight")),"."),(0,l.kt)("h4",{id:"headerblureffect"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBlurEffect")),(0,l.kt)("p",null,"Blur effect for the translucent header. The ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTransparent")," option needs to be set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," for this to work."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extraLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"light")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"regular")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prominent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterial")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterialLight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemUltraThinMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThinMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemThickMaterialDark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"systemChromeMaterialDark"))),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"headerbackground"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerBackground")),(0,l.kt)("p",null,"Function which returns a React Element to render as the background of the header. This is useful for using backgrounds such as an image or a gradient."),(0,l.kt)("h4",{id:"headertintcolor"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTintColor")),(0,l.kt)("p",null,"Tint color for the header. Changes the color of back button and title."),(0,l.kt)("h4",{id:"headerleft"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerLeft")),(0,l.kt)("p",null,"Function which returns a React Element to display on the left side of the header. This replaces the back button. See ",(0,l.kt)("inlineCode",{parentName:"p"},"headerBackVisible")," to show the back button along side left element."),(0,l.kt)("h4",{id:"headerright"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerRight")),(0,l.kt)("p",null,"Function which returns a React Element to display on the right side of the header."),(0,l.kt)("h4",{id:"headertitle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitle")),(0,l.kt)("p",null,"String or a function that returns a React Element to be used by the header. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," or name of the screen."),(0,l.kt)("p",null,"When a function is passed, it receives ",(0,l.kt)("inlineCode",{parentName:"p"},"tintColor")," and",(0,l.kt)("inlineCode",{parentName:"p"},"children")," in the options object as an argument. The title string is passed in ",(0,l.kt)("inlineCode",{parentName:"p"},"children"),"."),(0,l.kt)("p",null,"Note that if you render a custom element by passing a function, animations for the title won't work."),(0,l.kt)("h4",{id:"headertitlealign"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitleAlign")),(0,l.kt)("p",null,"How to align the header title. Possible values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"left")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"center"))),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"left")," on platforms other than iOS."),(0,l.kt)("p",null,"Not supported on iOS. It's always ",(0,l.kt)("inlineCode",{parentName:"p"},"center")," on iOS and cannot be changed."),(0,l.kt)("h4",{id:"headertitlestyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerTitleStyle")),(0,l.kt)("p",null,"Style object for header title. Supported properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontFamily")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontSize")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fontWeight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color"))),(0,l.kt)("h4",{id:"headersearchbaroptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"headerSearchBarOptions")),(0,l.kt)("p",null,"Options to render a native search bar on iOS. Search bars are rarely static so normally it is controlled by passing an object to ",(0,l.kt)("inlineCode",{parentName:"p"},"headerSearchBarOptions")," navigation option in the component's body. You also need to specify ",(0,l.kt)("inlineCode",{parentName:"p"},'contentInsetAdjustmentBehavior="automatic"')," in your ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FlatList")," etc. If you don't have a ",(0,l.kt)("inlineCode",{parentName:"p"},"ScrollView"),", specify ",(0,l.kt)("inlineCode",{parentName:"p"},"headerTransparent: false"),"."),(0,l.kt)("p",null,"Only supported on iOS and Android."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      // search bar options\n    },\n  });\n}, [navigation]);\n")),(0,l.kt)("p",null,"Supported properties are described below."),(0,l.kt)("h5",{id:"autocapitalize"},(0,l.kt)("inlineCode",{parentName:"h5"},"autoCapitalize")),(0,l.kt)("p",null,"Controls whether the text is automatically auto-capitalized as it is entered by the user.\nPossible values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"none")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"words")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sentences")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"characters"))),(0,l.kt)("p",null,"Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"sentences"),"."),(0,l.kt)("h5",{id:"autofocus"},(0,l.kt)("inlineCode",{parentName:"h5"},"autoFocus")),(0,l.kt)("p",null,"Whether to automatically focus search bar when it's shown. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"bartintcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"barTintColor")),(0,l.kt)("p",null,"The search field background color. By default bar tint color is translucent."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"tintcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"tintColor")),(0,l.kt)("p",null,"The color for the cursor caret and cancel button text."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"cancelbuttontext"},(0,l.kt)("inlineCode",{parentName:"h5"},"cancelButtonText")),(0,l.kt)("p",null,"The text to be used instead of default ",(0,l.kt)("inlineCode",{parentName:"p"},"Cancel")," button text."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"disablebackbuttonoverride"},(0,l.kt)("inlineCode",{parentName:"h5"},"disableBackButtonOverride")),(0,l.kt)("p",null,"Whether the back button should close search bar's text input or not. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"hidenavigationbar"},(0,l.kt)("inlineCode",{parentName:"h5"},"hideNavigationBar")),(0,l.kt)("p",null,"Boolean indicating whether to hide the navigation bar during searching. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"hidewhenscrolling"},(0,l.kt)("inlineCode",{parentName:"h5"},"hideWhenScrolling")),(0,l.kt)("p",null,"Boolean indicating whether to hide the search bar when scrolling. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h5",{id:"inputtype"},(0,l.kt)("inlineCode",{parentName:"h5"},"inputType")),(0,l.kt)("p",null,"The type of the input. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},'"text"'),"."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"text"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"phone"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"number"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"email"'))),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"obscurebackground"},(0,l.kt)("inlineCode",{parentName:"h5"},"obscureBackground")),(0,l.kt)("p",null,"Boolean indicating whether to obscure the underlying content with semi-transparent overlay. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h5",{id:"placeholder"},(0,l.kt)("inlineCode",{parentName:"h5"},"placeholder")),(0,l.kt)("p",null,"Text displayed when search field is empty."),(0,l.kt)("h5",{id:"textcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"textColor")),(0,l.kt)("p",null,"The color of the text in the search field."),(0,l.kt)("h5",{id:"hinttextcolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"hintTextColor")),(0,l.kt)("p",null,"The color of the hint text in the search field."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"headericoncolor"},(0,l.kt)("inlineCode",{parentName:"h5"},"headerIconColor")),(0,l.kt)("p",null,"The color of the search and close icons shown in the header"),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"shouldshowhintsearchicon"},(0,l.kt)("inlineCode",{parentName:"h5"},"shouldShowHintSearchIcon")),(0,l.kt)("p",null,"Whether to show the search hint icon when search bar is focused. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h5",{id:"onblur"},(0,l.kt)("inlineCode",{parentName:"h5"},"onBlur")),(0,l.kt)("p",null,"A callback that gets called when search bar has lost focus."),(0,l.kt)("h5",{id:"oncancelbuttonpress"},(0,l.kt)("inlineCode",{parentName:"h5"},"onCancelButtonPress")),(0,l.kt)("p",null,"A callback that gets called when the cancel button is pressed."),(0,l.kt)("h5",{id:"onchangetext"},(0,l.kt)("inlineCode",{parentName:"h5"},"onChangeText")),(0,l.kt)("p",null,"A callback that gets called when the text changes. It receives the current text value of the search bar."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const [search, setSearch] = React.useState('');\n\nReact.useLayoutEffect(() => {\n  navigation.setOptions({\n    headerSearchBarOptions: {\n      onChangeText: (event) => setSearch(event.nativeEvent.text),\n    },\n  });\n}, [navigation]);\n")),(0,l.kt)("h4",{id:"header"},(0,l.kt)("inlineCode",{parentName:"h4"},"header")),(0,l.kt)("p",null,"Custom header to use instead of the default header."),(0,l.kt)("p",null,"This accepts a function that returns a React Element to display as a header. The function receives an object containing the following properties as the argument:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"navigation")," - The navigation object for the current screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"route")," - The route object for the current screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options")," - The options for the current screen"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"back")," - Options for the back button, contains an object with a ",(0,l.kt)("inlineCode",{parentName:"li"},"title")," property to use for back button label.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { getHeaderTitle } from '@react-navigation/elements';\n\n// ..\n\nheader: ({ navigation, route, options, back }) => {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <MyHeader\n      title={title}\n      leftButton={\n        back ? <MyBackButton onPress={navigation.goBack} /> : undefined\n      }\n      style={options.headerStyle}\n    />\n  );\n};\n")),(0,l.kt)("p",null,"To set a custom header for all the screens in the navigator, you can specify this option in the ",(0,l.kt)("inlineCode",{parentName:"p"},"screenOptions")," prop of the navigator."),(0,l.kt)("p",null,"Note that if you specify a custom header, the native functionality such as large title, search bar etc. won't work."),(0,l.kt)("h4",{id:"statusbaranimation"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarAnimation")),(0,l.kt)("p",null,"Sets the status bar animation (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component). Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"fade")," on iOS and ",(0,l.kt)("inlineCode",{parentName:"p"},"none")," on Android."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"fade"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"none"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"slide"'))),(0,l.kt)("p",null,"On Android, setting either ",(0,l.kt)("inlineCode",{parentName:"p"},"fade")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"slide")," will set the transition of status bar color. On iOS, this option applies to appereance animation of the status bar."),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"statusbarhidden"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarHidden")),(0,l.kt)("p",null,"Whether the status bar should be hidden on this screen."),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"statusbarstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarStyle")),(0,l.kt)("p",null,"Sets the status bar color (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component). Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"auto"),"."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"auto"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"inverted"')," (iOS only)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"dark"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"light"'))),(0,l.kt)("p",null,"Requires setting ",(0,l.kt)("inlineCode",{parentName:"p"},"View controller-based status bar appearance -> YES")," (or removing the config) in your ",(0,l.kt)("inlineCode",{parentName:"p"},"Info.plist")," file."),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"statusbarcolor"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarColor")),(0,l.kt)("p",null,"Sets the status bar color (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component). Defaults to initial status bar color."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h4",{id:"statusbartranslucent"},(0,l.kt)("inlineCode",{parentName:"h4"},"statusBarTranslucent")),(0,l.kt)("p",null,"Sets the translucency of the status bar (similar to the ",(0,l.kt)("inlineCode",{parentName:"p"},"StatusBar")," component). Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h4",{id:"contentstyle"},(0,l.kt)("inlineCode",{parentName:"h4"},"contentStyle")),(0,l.kt)("p",null,"Style object for the scene content."),(0,l.kt)("h4",{id:"customanimationongesture"},(0,l.kt)("inlineCode",{parentName:"h4"},"customAnimationOnGesture")),(0,l.kt)("p",null,"Whether the gesture to dismiss should use animation provided to ",(0,l.kt)("inlineCode",{parentName:"p"},"animation")," prop. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Doesn't affect the behavior of screens presented modally."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"fullscreengestureenabled"},(0,l.kt)("inlineCode",{parentName:"h4"},"fullScreenGestureEnabled")),(0,l.kt)("p",null,"Whether the gesture to dismiss should work on the whole screen. Using gesture to dismiss with this option results in the same transition animation as ",(0,l.kt)("inlineCode",{parentName:"p"},"simple_push"),". This behavior can be changed by setting ",(0,l.kt)("inlineCode",{parentName:"p"},"customAnimationOnGesture")," prop. Achieving the default iOS animation isn't possible due to platform limitations. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Doesn't affect the behavior of screens presented modally."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"gestureenabled"},(0,l.kt)("inlineCode",{parentName:"h4"},"gestureEnabled")),(0,l.kt)("p",null,"Whether you can use gestures to dismiss this screen. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),". Only supported on iOS."),(0,l.kt)("h4",{id:"animationtypeforreplace"},(0,l.kt)("inlineCode",{parentName:"h4"},"animationTypeForReplace")),(0,l.kt)("p",null,"The type of animation to use when this screen replaces another screen. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"pop"),"."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"push"),": the new screen will perform push animation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pop"),": the new screen will perform pop animation.")),(0,l.kt)("h4",{id:"animation"},(0,l.kt)("inlineCode",{parentName:"h4"},"animation")),(0,l.kt)("p",null,"How the screen should animate when pushed or popped."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default"),": use the platform default animation"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fade"),": fade screen in or out"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fade_from_bottom"),": fade the new screen from bottom"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"flip"),": flip the screen, requires ",(0,l.kt)("inlineCode",{parentName:"li"},'presentation: "modal"')," (iOS only)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"simple_push"),": default animation, but without shadow and native header transition (iOS only, uses default animation on Android)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slide_from_bottom"),": slide in the new screen from bottom"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slide_from_right"),": slide in the new screen from right (Android only, uses default animation on iOS)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"slide_from_left"),": slide in the new screen from left (Android only, uses default animation on iOS)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"none"),": don't animate the screen")),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"presentation"},(0,l.kt)("inlineCode",{parentName:"h4"},"presentation")),(0,l.kt)("p",null,"How should the screen be presented."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"card"),": the new screen will be pushed onto a stack, which means the default animation will be slide from the side on iOS, the animation on Android will vary depending on the OS version and theme."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"modal"),": the new screen will be presented modally. this also allows for a nested stack to be rendered inside the screen."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transparentModal"),": the new screen will be presented modally, but in addition, the previous screen will stay so that the content below can still be seen if the screen has translucent background."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containedModal"),': will use "UIModalPresentationCurrentContext" modal style on iOS and will fallback to "modal" on Android.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containedTransparentModal"),': will use "UIModalPresentationOverCurrentContext" modal style on iOS and will fallback to "transparentModal" on Android.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fullScreenModal"),': will use "UIModalPresentationFullScreen" modal style on iOS and will fallback to "modal" on Android. A screen using this presentation style can\'t be dismissed by gesture.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"formSheet"),': will use "UIModalPresentationFormSheet" modal style on iOS and will fallback to "modal" on Android.')),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"orientation"},(0,l.kt)("inlineCode",{parentName:"h4"},"orientation")),(0,l.kt)("p",null,"The display orientation to use for the screen."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default"),' - resolves to "all" without "portrait_down" on iOS. On Android, this lets the system decide the best orientation.'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"all"),": all orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait"),": portrait orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait_up"),": right-side portrait orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"portrait_down"),": upside-down portrait orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape"),": landscape orientations are permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape_left"),": landscape-left orientation is permitted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"landscape_right"),": landscape-right orientation is permitted.")),(0,l.kt)("p",null,"Only supported on Android and iOS."),(0,l.kt)("h4",{id:"autohidehomeindicator"},(0,l.kt)("inlineCode",{parentName:"h4"},"autoHideHomeIndicator")),(0,l.kt)("p",null,"Boolean indicating whether the home indicator should prefer to stay hidden. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"gesturedirection"},(0,l.kt)("inlineCode",{parentName:"h4"},"gestureDirection")),(0,l.kt)("p",null,"Sets the direction in which you should swipe to dismiss the screen."),(0,l.kt)("p",null,"Supported values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vertical")," \u2013 dismiss screen vertically"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"horizontal")," \u2013 dismiss screen horizontally (default)")),(0,l.kt)("p",null,"When using ",(0,l.kt)("inlineCode",{parentName:"p"},"vertical")," option, options ",(0,l.kt)("inlineCode",{parentName:"p"},"fullScreenGestureEnabled: true"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"customAnimationOnGesture: true")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"animation: 'slide_from_bottom'")," are set by default."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"animationduration"},(0,l.kt)("inlineCode",{parentName:"h4"},"animationDuration")),(0,l.kt)("p",null,"Changes the duration (in milliseconds) of ",(0,l.kt)("inlineCode",{parentName:"p"},"slide_from_bottom"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fade_from_bottom"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fade")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"simple_push")," transitions on iOS. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"350"),"."),(0,l.kt)("p",null,"The duration of ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"flip")," transitions isn't customizable."),(0,l.kt)("p",null,"Only supported on iOS."),(0,l.kt)("h4",{id:"navigationbarcolor"},(0,l.kt)("inlineCode",{parentName:"h4"},"navigationBarColor")),(0,l.kt)("p",null,"Sets the navigation bar color. Defaults to initial status bar color."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h4",{id:"navigationbarhidden"},(0,l.kt)("inlineCode",{parentName:"h4"},"navigationBarHidden")),(0,l.kt)("p",null,"Boolean indicating whether the navigation bar should be hidden. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,"Only supported on Android."),(0,l.kt)("h4",{id:"freezeonblur"},(0,l.kt)("inlineCode",{parentName:"h4"},"freezeOnBlur")),(0,l.kt)("p",null,"Boolean indicating whether to prevent inactive screens from re-rendering. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),".\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," when ",(0,l.kt)("inlineCode",{parentName:"p"},"enableFreeze()")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"react-native-screens")," package is run at the top of the application."),(0,l.kt)("p",null,"Requires ",(0,l.kt)("inlineCode",{parentName:"p"},"react-native-screens")," version >=3.16.0."),(0,l.kt)("p",null,"Only supported on iOS and Android."),(0,l.kt)("h3",{id:"events"},"Events"),(0,l.kt)("p",null,"The navigator can ",(0,l.kt)("a",{parentName:"p",href:"/docs/navigation-events"},"emit events")," on certain actions. Supported events are:"),(0,l.kt)("h4",{id:"transitionstart"},(0,l.kt)("inlineCode",{parentName:"h4"},"transitionStart")),(0,l.kt)("p",null,"This event is fired when the transition animation starts for the current screen."),(0,l.kt)("p",null,"Event data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e.data.closing")," - Boolean indicating whether the screen is being opened or closed.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionStart', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n")),(0,l.kt)("h4",{id:"transitionend"},(0,l.kt)("inlineCode",{parentName:"h4"},"transitionEnd")),(0,l.kt)("p",null,"This event is fired when the transition animation ends for the current screen."),(0,l.kt)("p",null,"Event data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e.data.closing")," - Boolean indicating whether the screen was opened or closed.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"React.useEffect(() => {\n  const unsubscribe = navigation.addListener('transitionEnd', (e) => {\n    // Do something\n  });\n\n  return unsubscribe;\n}, [navigation]);\n")),(0,l.kt)("h3",{id:"helpers"},"Helpers"),(0,l.kt)("p",null,"The native stack navigator adds the following methods to the navigation prop:"),(0,l.kt)("h4",{id:"replace"},(0,l.kt)("inlineCode",{parentName:"h4"},"replace")),(0,l.kt)("p",null,"Replaces the current screen with a new screen in the stack. The method accepts following arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - ",(0,l.kt)("em",{parentName:"li"},"string")," - Name of the route to push onto the stack."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,l.kt)("em",{parentName:"li"},"object")," - Screen params to pass to the destination route.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.replace('Profile', { owner: 'Micha\u015b' });\n")),(0,l.kt)("h4",{id:"push"},(0,l.kt)("inlineCode",{parentName:"h4"},"push")),(0,l.kt)("p",null,"Pushes a new screen to top of the stack and navigate to it. The method accepts following arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - ",(0,l.kt)("em",{parentName:"li"},"string")," - Name of the route to push onto the stack."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,l.kt)("em",{parentName:"li"},"object")," - Screen params to pass to the destination route.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.push('Profile', { owner: 'Micha\u015b' });\n")),(0,l.kt)("h4",{id:"pop"},(0,l.kt)("inlineCode",{parentName:"h4"},"pop")),(0,l.kt)("p",null,"Pops the current screen from the stack and navigates back to the previous screen. It takes one optional argument (",(0,l.kt)("inlineCode",{parentName:"p"},"count"),"), which allows you to specify how many screens to pop back by."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.pop();\n")),(0,l.kt)("h4",{id:"poptotop"},(0,l.kt)("inlineCode",{parentName:"h4"},"popToTop")),(0,l.kt)("p",null,"Pops all of the screens in the stack except the first one and navigates to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"navigation.popToTop();\n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        headerTintColor: 'white',\n        headerStyle: { backgroundColor: 'tomato' },\n      }}\n    >\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{\n          title: 'Awesome app',\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          title: 'My profile',\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          gestureEnabled: false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n")))}v.isMDXComponent=!0}}]);