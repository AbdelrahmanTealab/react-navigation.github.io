"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[9352],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=p(n),u=i,k=h["".concat(s,".").concat(u)]||h[u]||c[u]||r;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},26977:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return h}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={id:"stack-navigator",title:"StackNavigator reference",sidebar_label:"StackNavigator"},s=void 0,p={unversionedId:"stack-navigator",id:"version-1.x/stack-navigator",isDocsHomePage:!1,title:"StackNavigator reference",description:"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-1.x/stack-navigator.md",sourceDirName:".",slug:"/stack-navigator",permalink:"/docs/1.x/stack-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/stack-navigator.md",tags:[],version:"1.x",frontMatter:{id:"stack-navigator",title:"StackNavigator reference",sidebar_label:"StackNavigator"},sidebar:"api",previous:{title:"NavigationActions",permalink:"/docs/1.x/navigation-actions"},next:{title:"SwitchNavigator",permalink:"/docs/1.x/switch-navigator"}},d=[{value:"API Definition",id:"api-definition",children:[{value:"RouteConfigs",id:"routeconfigs",children:[]},{value:"StackNavigatorConfig",id:"stacknavigatorconfig",children:[]},{value:"<code>navigationOptions</code> used by <code>StackNavigator</code>",id:"navigationoptions-used-by-stacknavigator",children:[]},{value:"Navigator Props",id:"navigator-props",children:[]},{value:"Examples",id:"examples",children:[]}]},{value:"Navigator props",id:"navigator-props-1",children:[]}],c={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Provides a way for your app to transition between screens where each new screen is placed on top of a stack."),(0,r.kt)("p",null,"By default the StackNavigator is configured to have the familiar iOS and Android look & feel: new screens slide in from the right on iOS, fade in from the bottom on Android. On iOS the StackNavigator can also be configured to a modal style where screens slide in from the bottom."),(0,r.kt)("h2",{id:"api-definition"},"API Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"StackNavigator(RouteConfigs, StackNavigatorConfig);\n")),(0,r.kt)("h3",{id:"routeconfigs"},"RouteConfigs"),(0,r.kt)("p",null,"The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"StackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n")),(0,r.kt)("h3",{id:"stacknavigatorconfig"},"StackNavigatorConfig"),(0,r.kt)("p",null,"Options for the router:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initialRouteName")," - Sets the default screen of the stack. Must match one of the keys in route configs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initialRouteParams")," - The params for the initial route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"navigationOptions")," - Default navigation options to use for screens"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"paths")," - A mapping of overrides for the paths set in the route configs")),(0,r.kt)("p",null,"Visual options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mode")," - Defines the style for rendering and transitions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"card")," - Use the standard iOS and Android screen transitions. This is the default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modal")," - Make the screens slide in from the bottom which is a common iOS pattern. Only works on iOS, has no effect on Android."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headerMode")," - Specifies how the header should be rendered:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float")," - Render a single header that stays at the top and animates as screens are changed. This is a common pattern on iOS."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"screen")," - Each screen has a header attached to it and the header fades in and out together with the screen. This is a common pattern on Android."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"none")," - No header will be rendered."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headerTransitionPreset")," - Specifies how the header should transition from one screen to another when ",(0,r.kt)("inlineCode",{parentName:"li"},"headerMode: float")," is enabled.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fade-in-place")," - Header components cross-fade without moving, similar to the Twitter, Instagram, and Facebook app for iOS. This is the default value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uikit")," - An approximation of the default behavior for iOS."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cardStyle")," - Use this prop to override or extend the default style for an individual card in stack."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionConfig")," - Function to return an object that is merged with the default screen transitions (take a look at TransitionConfig in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/react-navigation/react-navigation/blob/1.x/flow/react-navigation.js"},"type definitions"),"). Provided function will be passed the following arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionProps")," - Transition props for the new screen."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prevTransitionProps")," - Transitions props for the old screen."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isModal")," - Boolean specifying if screen is modal."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTransitionStart")," - Function to be invoked when the card transition animation is about to start."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTransitionEnd")," - Function to be invoked once the card transition animation completes.")),(0,r.kt)("h3",{id:"navigationoptions-used-by-stacknavigator"},(0,r.kt)("inlineCode",{parentName:"h3"},"navigationOptions")," used by ",(0,r.kt)("inlineCode",{parentName:"h3"},"StackNavigator")),(0,r.kt)("h4",{id:"title"},(0,r.kt)("inlineCode",{parentName:"h4"},"title")),(0,r.kt)("p",null,"String that can be used as a fallback for ",(0,r.kt)("inlineCode",{parentName:"p"},"headerTitle"),". Additionally, will be used as a fallback for ",(0,r.kt)("inlineCode",{parentName:"p"},"tabBarLabel")," (if nested in a TabNavigator) or ",(0,r.kt)("inlineCode",{parentName:"p"},"drawerLabel")," (if nested in a DrawerNavigator)."),(0,r.kt)("h4",{id:"header"},(0,r.kt)("inlineCode",{parentName:"h4"},"header")),(0,r.kt)("p",null,"React Element or a function that given ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderProps")," returns a React Element, to display as a header. Setting to ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," hides header."),(0,r.kt)("h4",{id:"headertitle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTitle")),(0,r.kt)("p",null,"String, React Element or React Component used by the header. Defaults to scene ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),". When a component is used, it receives ",(0,r.kt)("inlineCode",{parentName:"p"},"allowFontScaling"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"style")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," props. The title string is passed in ",(0,r.kt)("inlineCode",{parentName:"p"},"children"),"."),(0,r.kt)("h4",{id:"headertitleallowfontscaling"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTitleAllowFontScaling")),(0,r.kt)("p",null,"Whether header title font should scale to respect Text Size accessibility settings. Defaults to true."),(0,r.kt)("h4",{id:"headerbackimage"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerBackImage")),(0,r.kt)("p",null,"The image source (either a remote URL ",(0,r.kt)("inlineCode",{parentName:"p"},"{{uri: 'path/to/image'}}")," or a local file resource ",(0,r.kt)("inlineCode",{parentName:"p"},"{require('path/to/image')}"),") used by the back button.\nDefaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"react-navigation/views/assets/back-icon.png"),", which is the default back icon image for the platform (a chevron on iOS and an arrow on Android)."),(0,r.kt)("h4",{id:"headerbacktitle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerBackTitle")),(0,r.kt)("p",null,"Title string used by the back button on iOS, or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," to disable label. Defaults to the previous scene's ",(0,r.kt)("inlineCode",{parentName:"p"},"headerTitle"),"."),(0,r.kt)("h4",{id:"headertruncatedbacktitle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTruncatedBackTitle")),(0,r.kt)("p",null,"Title string used by the back button when ",(0,r.kt)("inlineCode",{parentName:"p"},"headerBackTitle")," doesn't fit on the screen. ",(0,r.kt)("inlineCode",{parentName:"p"},'"Back"')," by default."),(0,r.kt)("h4",{id:"headerright"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerRight")),(0,r.kt)("p",null,"React Element to display on the right side of the header."),(0,r.kt)("h4",{id:"headerleft"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerLeft")),(0,r.kt)("p",null,"React Element or Component to display on the left side of the header. When a component is used, it receives a number of props when rendered (",(0,r.kt)("inlineCode",{parentName:"p"},"onPress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"titleStyle")," and more - check ",(0,r.kt)("inlineCode",{parentName:"p"},"Header.js")," for the complete list)."),(0,r.kt)("h4",{id:"headerstyle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerStyle")),(0,r.kt)("p",null,"Style object for the header"),(0,r.kt)("h4",{id:"headerforceinset"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerForceInset")),(0,r.kt)("p",null,"Allows to pass ",(0,r.kt)("inlineCode",{parentName:"p"},"forceInset")," object to internal SafeAreaView used in the header."),(0,r.kt)("h4",{id:"headertitlestyle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTitleStyle")),(0,r.kt)("p",null,"Style object for the title component"),(0,r.kt)("h4",{id:"headerbacktitlestyle"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerBackTitleStyle")),(0,r.kt)("p",null,"Style object for the back title"),(0,r.kt)("h4",{id:"headertintcolor"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTintColor")),(0,r.kt)("p",null,"Tint color for the header"),(0,r.kt)("h4",{id:"headerpresscolorandroid"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerPressColorAndroid")),(0,r.kt)("p",null,"Color for material ripple (Android >= 5.0 only)"),(0,r.kt)("h4",{id:"headertransparent"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerTransparent")),(0,r.kt)("p",null,"Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the header will not have a background unless you explicitly provide it with ",(0,r.kt)("inlineCode",{parentName:"p"},"headerStyle")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"headerBackground"),"."),(0,r.kt)("h4",{id:"headerbackground"},(0,r.kt)("inlineCode",{parentName:"h4"},"headerBackground")),(0,r.kt)("p",null,"Use this with ",(0,r.kt)("inlineCode",{parentName:"p"},"headerTransparent")," to provide a component to render in the background of the header. You can use this with a blur view, for example, to create a translucent header."),(0,r.kt)("h4",{id:"gesturesenabled"},(0,r.kt)("inlineCode",{parentName:"h4"},"gesturesEnabled")),(0,r.kt)("p",null,"Whether you can use gestures to dismiss this screen. Defaults to true on iOS, false on Android."),(0,r.kt)("h4",{id:"gestureresponsedistance"},(0,r.kt)("inlineCode",{parentName:"h4"},"gestureResponseDistance")),(0,r.kt)("p",null,"Object to override the distance of touch start from the edge of the screen to recognize gestures. It takes the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"horizontal")," - ",(0,r.kt)("em",{parentName:"li"},"number")," - Distance for horizontal direction. Defaults to 25."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vertical")," - ",(0,r.kt)("em",{parentName:"li"},"number")," - Distance for vertical direction. Defaults to 135.")),(0,r.kt)("h4",{id:"gesturedirection"},(0,r.kt)("inlineCode",{parentName:"h4"},"gestureDirection")),(0,r.kt)("p",null,"String to override the direction for dismiss gesture. ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," for normal behaviour or ",(0,r.kt)("inlineCode",{parentName:"p"},"inverted")," for right-to-left swipes."),(0,r.kt)("h3",{id:"navigator-props"},"Navigator Props"),(0,r.kt)("p",null,"The navigator component created by ",(0,r.kt)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens, for example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const SomeStack = StackNavigator({\n  // config\n});\n\n<SomeStack\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("p",null,"See the examples ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/SimpleStack.js"},"SimpleStack.js")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/ModalStack.js"},"ModalStack.js")," which you can run locally as part of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground"},"NavigationPlayground")," app."),(0,r.kt)("p",null,"You can view these examples directly on your phone by visiting ",(0,r.kt)("a",{parentName:"p",href:"https://exp.host/@react-navigation/NavigationPlayground"},"our expo demo"),"."),(0,r.kt)("h4",{id:"modal-stacknavigator-with-custom-screen-transitions"},"Modal StackNavigator with Custom Screen Transitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const ModalNavigator = StackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    navigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: sceneProps => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n")),(0,r.kt)("p",null,"Header transitions can also be configured using ",(0,r.kt)("inlineCode",{parentName:"p"},"headerLeftInterpolator"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"headerTitleInterpolator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"headerRightInterpolator")," fields under ",(0,r.kt)("inlineCode",{parentName:"p"},"transitionConfig"),"."),(0,r.kt)("h2",{id:"navigator-props-1"},"Navigator props"),(0,r.kt)("p",null,"The navigator component created by ",(0,r.kt)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens and navigation options, for example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const StackNav = StackNavigator({\n  // config\n});\n\n<StackNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")))}h.isMDXComponent=!0}}]);