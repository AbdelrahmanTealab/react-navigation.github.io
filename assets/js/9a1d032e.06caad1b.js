"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[86478],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),v=p(n),m=r,f=v["".concat(s,".").concat(m)]||v[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=v;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},28515:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return v}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],c={id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},s=void 0,p={unversionedId:"native-stack-navigator",id:"version-5.x/native-stack-navigator",isDocsHomePage:!1,title:"Native Stack Navigator",description:"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-5.x/native-stack-navigator.md",sourceDirName:".",slug:"/native-stack-navigator",permalink:"/docs/5.x/native-stack-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/native-stack-navigator.md",tags:[],version:"5.x",frontMatter:{id:"native-stack-navigator",title:"Native Stack Navigator",sidebar_label:"Native Stack"},sidebar:"version-5.x/docs",previous:{title:"Stack",permalink:"/docs/5.x/stack-navigator"},next:{title:"Drawer",permalink:"/docs/5.x/drawer-navigator"}},l=[{value:"API Definition",id:"api-definition",children:[],level:2}],u={toc:l};function v(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a way for your app to transition between screens where each new screen is placed on top of a stack."),(0,i.kt)("p",null,"This navigator uses the native APIs ",(0,i.kt)("inlineCode",{parentName:"p"},"UINavigationController")," on iOS and ",(0,i.kt)("inlineCode",{parentName:"p"},"Fragment")," on Android so that navigation built with ",(0,i.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," will behave exactly the same and have the same performance characteristics as apps built natively on top of those APIs."),(0,i.kt)("p",null,"The tradeoff is that ",(0,i.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," isn't quite as customizable, so sometimes you may want to use ",(0,i.kt)("inlineCode",{parentName:"p"},"createStackNavigator")," instead in order to achieve the exact appearance or behaviour that you desire for your app."),(0,i.kt)("p",null,"This navigator does not currently support web. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"createStackNavigator")," for the web navigation in your app instead."),(0,i.kt)("p",null,"To use this navigator, ensure that you have ",(0,i.kt)("a",{parentName:"p",href:"/docs/5.x/getting-started"},(0,i.kt)("inlineCode",{parentName:"a"},"@react-navigation/native")," and its dependencies (follow this guide)"),"."),(0,i.kt)("h2",{id:"api-definition"},"API Definition"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 If you encounter any bugs while using ",(0,i.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator"),", please open issues on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-screens"},(0,i.kt)("inlineCode",{parentName:"a"},"react-native-screens"))," rather than the ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," repository!")),(0,i.kt)("p",null,"To use this navigator, import ",(0,i.kt)("inlineCode",{parentName:"p"},"enableScreens")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-screens")," and invoke it, and import ",(0,i.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-screens/native-stack"),":"),(0,i.kt)("samp",{id:"simple-native-stack"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { enableScreens } from \'react-native-screens\';\nimport { createNativeStackNavigator } from \'react-native-screens/native-stack\';\n\nenableScreens();\nconst Stack = createNativeStackNavigator();\n\nfunction MyStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name="Home" component={Home} />\n      <Stack.Screen name="Notifications" component={Notifications} />\n      <Stack.Screen name="Profile" component={Profile} />\n      <Stack.Screen name="Settings" component={Settings} />\n    </Stack.Navigator>\n  );\n}\n')),(0,i.kt)("p",null,"For the full, up-to-date API reference, please refer to the README for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-screens/tree/master/native-stack"},"react-native-screens/native-stack"),"."))}v.isMDXComponent=!0}}]);