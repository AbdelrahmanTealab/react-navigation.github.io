"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[12305],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return w}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),w=a,m=u["".concat(l,".").concat(w)]||u[w]||d[w]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function w(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89014:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={id:"multiple-drawers",title:"Multiple drawers",sidebar_label:"Multiple drawers"},l=void 0,p={unversionedId:"multiple-drawers",id:"version-7.x/multiple-drawers",isDocsHomePage:!1,title:"Multiple drawers",description:"Sometimes we want to have multiple drawers on the same screen: one on the left and one on the right. This can be achieved by nesting 2 drawer navigators.",source:"@site/versioned_docs/version-7.x/multiple-drawers.md",sourceDirName:".",slug:"/multiple-drawers",permalink:"/docs/7.x/multiple-drawers",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/multiple-drawers.md",tags:[],version:"7.x",frontMatter:{id:"multiple-drawers",title:"Multiple drawers",sidebar_label:"Multiple drawers"},sidebar:"version-7.x/docs",previous:{title:"Opening a modal",permalink:"/docs/7.x/modal"},next:{title:"Screen options with nested navigators",permalink:"/docs/7.x/screen-options-resolution"}},c=[{value:"Nesting 2 drawer navigators",id:"nesting-2-drawer-navigators",children:[],level:2},{value:"Summary",id:"summary",children:[],level:2}],d={toc:c};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Sometimes we want to have multiple drawers on the same screen: one on the left and one on the right. This can be achieved by ",(0,i.kt)("a",{parentName:"p",href:"/docs/7.x/nesting-navigators"},"nesting")," 2 ",(0,i.kt)("a",{parentName:"p",href:"/docs/7.x/drawer-navigator"},"drawer navigators"),"."),(0,i.kt)("h2",{id:"nesting-2-drawer-navigators"},"Nesting 2 drawer navigators"),(0,i.kt)("p",null,"Here we have 2 drawers nested inside each other, one is positioned on left and the other on the right:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Button, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.openDrawer()} title=\"Open drawer\" />\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nconst LeftDrawerScreen = () => {\n  return (\n    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n};\n\nconst RightDrawer = createDrawerNavigator();\n\nconst RightDrawerScreen = () => {\n  return (\n    <RightDrawer.Navigator\n      screenOptions={{ drawerPosition: 'right', headerShown: false }}\n    >\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n")),(0,i.kt)("p",null,"But there is one problem. When we call ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation.openDrawer()")," in our ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen"),", it always opens the left drawer since it's the immediate parent of the screen."),(0,i.kt)("p",null,"To solve this, we need to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/7.x/navigation-prop#getparent"},(0,i.kt)("inlineCode",{parentName:"a"},"navigation.getParent"))," to refer to the right drawer which is the parent of the left drawer. So our code would look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<Button onPress={() => navigation.openDrawer()} title="Open left drawer" />\n<Button onPress={() => navigation.getParent().openDrawer()} title="Open right drawer" />\n')),(0,i.kt)("p",null,"However, this means that our button needs to know about the parent navigators, which isn't ideal. If our button is further nested inside other navigators, it'd need multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"getParent()")," calls. To address this, we can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/7.x/drawer-navigator#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")," prop")," to identify the parent navigator."),(0,i.kt)("p",null,"To customize the contents of the drawer, we can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/7.x/drawer-navigator#drawercontent"},(0,i.kt)("inlineCode",{parentName:"a"},"drawerContent")," prop")," to pass in a function that renders a custom component."),(0,i.kt)("p",null,"The final code would look like this:"),(0,i.kt)("samp",{id:"multiple-drawers"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button\n        onPress={() => navigation.getParent('LeftDrawer').openDrawer()}\n        title=\"Open left drawer\"\n      />\n      <Button\n        onPress={() => navigation.getParent('RightDrawer').openDrawer()}\n        title=\"Open right drawer\"\n      />\n    </View>\n  );\n}\n\nfunction RightDrawerContent() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>This is the right drawer</Text>\n    </View>\n  );\n}\n\nconst LeftDrawer = createDrawerNavigator();\n\nfunction LeftDrawerScreen() {\n  return (\n    <LeftDrawer.Navigator\n      id=\"LeftDrawer\"\n      screenOptions={{ drawerPosition: 'left' }}>\n      <LeftDrawer.Screen name=\"Home\" component={HomeScreen} />\n    </LeftDrawer.Navigator>\n  );\n}\n\nconst RightDrawer = createDrawerNavigator();\n\nfunction RightDrawerScreen() {\n  return (\n    <RightDrawer.Navigator\n      id=\"RightDrawer\"\n      drawerContent={(props) => <RightDrawerContent {...props} />}\n      screenOptions={{\n        drawerPosition: 'right',\n        headerShown: false,\n      }}>\n      <RightDrawer.Screen name=\"HomeDrawer\" component={LeftDrawerScreen} />\n    </RightDrawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RightDrawerScreen />\n    </NavigationContainer>\n  );\n}\n\n")),(0,i.kt)("p",null,"Here, we are passing ",(0,i.kt)("inlineCode",{parentName:"p"},'"LeftDrawer"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"RightDrawer"')," strings (you can use any string here) in the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," prop of the drawer navigators. Then we use ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation.getParent('LeftDrawer').openDrawer()")," to open the left drawer and ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation.getParent('RightDrawer').openDrawer()")," to open the right drawer."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To have 2 drawers on the screen, you can use the ",(0,i.kt)("a",{parentName:"li",href:"/docs/7.x/drawer-navigator#drawerposition"},(0,i.kt)("inlineCode",{parentName:"a"},"drawerPosition"))," option to position them on ",(0,i.kt)("inlineCode",{parentName:"li"},'"left"')," and ",(0,i.kt)("inlineCode",{parentName:"li"},'"right"'),"."),(0,i.kt)("li",{parentName:"ul"},"To open the desired drawer, you can use ",(0,i.kt)("a",{parentName:"li",href:"/docs/7.x/navigation-prop#getparent"},(0,i.kt)("inlineCode",{parentName:"a"},"navigation.getParent"))," in combination with the ",(0,i.kt)("a",{parentName:"li",href:"/docs/7.x/drawer-navigator#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")," prop"),".")))}u.isMDXComponent=!0}}]);