(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{516:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(8),o=(n(0),n(522)),i={id:"themes",title:"Themes",sidebar_label:"Themes"},c={unversionedId:"themes",id:"version-5.x/themes",isDocsHomePage:!1,title:"Themes",description:"Themes allow you to change the colors of various components provided by React Navigation. You can use themes to:",source:"@site/versioned_docs/version-5.x/themes.md",slug:"/themes",permalink:"/docs/themes",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/themes.md",version:"5.x",sidebar_label:"Themes",sidebar:"version-5.x/docs",previous:{title:"Screen tracking for analytics",permalink:"/docs/screen-tracking"},next:{title:"State persistence",permalink:"/docs/state-persistence"}},s=[{value:"Basic usage",id:"basic-usage",children:[]},{value:"Built-in themes",id:"built-in-themes",children:[]},{value:"Using the operating system preferences",id:"using-the-operating-system-preferences",children:[]},{value:"Using the current theme in your own components",id:"using-the-current-theme-in-your-own-components",children:[]}],l={toc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Themes allow you to change the colors of various components provided by React Navigation. You can use themes to:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Customize the colors match your brand"),Object(o.b)("li",{parentName:"ul"},"Provide light and dark themes based on the time of the day or user preference")),Object(o.b)("h2",{id:"basic-usage"},"Basic usage"),Object(o.b)("p",null,"To pass a custom theme, you can pass the ",Object(o.b)("inlineCode",{parentName:"p"},"theme")," prop to the navigation container."),Object(o.b)("samp",{id:"simple-theme"}),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\n\nconst MyTheme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'rgb(255, 45, 85)',\n  },\n};\n\nexport default function App() {\n  return (\n    <NavigationContainer theme={MyTheme}>{/* content */}</NavigationContainer>\n  );\n}\n")),Object(o.b)("p",null,"You can change the theme prop dynamically and all the components will automatically update to reflect the new theme. If you haven't provided a ",Object(o.b)("inlineCode",{parentName:"p"},"theme")," prop, the default theme will be used."),Object(o.b)("p",null,"A theme is a JS object containing a list of colors to use. It contains the following properties:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"dark")," (",Object(o.b)("inlineCode",{parentName:"li"},"boolean"),"): Whether this is a dark theme or a light theme"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"colors")," (",Object(o.b)("inlineCode",{parentName:"li"},"object"),"): Various colors used by react navigation components:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"primary")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The primary color of the app used to tint various elements. Usually you'll want to use your brand color for this."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"background")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The color of various backgrounds, such as background color for the screens."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"card")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The background color of card-like elements, such as headers, tab bars etc."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"text")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The text color of various elements."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"border")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The color of borders, e.g. header border, tab bar border etc."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"notification")," (",Object(o.b)("inlineCode",{parentName:"li"},"string"),"): The color of Tab Navigator badge.")))),Object(o.b)("p",null,"When creating a custom theme, you will need to provide all of these properties."),Object(o.b)("p",null,"Example theme:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const MyTheme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(255, 45, 85)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(199, 199, 204)',\n    notification: 'rgb(255, 69, 58)',\n  },\n};\n")),Object(o.b)("p",null,"Providing a theme will take care of styling of all the official navigators. React Navigation also provides several tools to help you make your customizations of those navigators and the screens within the navigators can use the theme too."),Object(o.b)("h2",{id:"built-in-themes"},"Built-in themes"),Object(o.b)("p",null,"As operating systems add built-in support for light and dark modes, supporting dark mode is less about keeping hip to trends and more about conforming to the average user expectations for how apps should work. In order to provide support for light and dark mode in a way that is reasonably consistent with the OS defaults, these themes are built in to React Navigation."),Object(o.b)("p",null,"You can import the default and dark themes like so:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { DefaultTheme, DarkTheme } from '@react-navigation/native';\n")),Object(o.b)("h2",{id:"using-the-operating-system-preferences"},"Using the operating system preferences"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"react-native")," currently supports detecting the operating system color scheme preferences in the core (",Object(o.b)("a",{parentName:"p",href:"https://reactnative.dev/docs/appearance"},"via Appearance API"),") introduced in 0.63. If the version you use doesn't support it, you can use ",Object(o.b)("a",{parentName:"p",href:"https://github.com/expo/react-native-appearance"},Object(o.b)("inlineCode",{parentName:"a"},"react-native-appearance")),"."),Object(o.b)("p",null,"You will need iOS 13 to actually be able to toggle dark mode through system settings. Be aware that Android 11 also supports it but some custom layer doesn't handle to easily toggle."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: if you use the Expo managed workflow, this requires SDK 35+")),Object(o.b)("samp",{id:"system-themes"}),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { useColorScheme } from 'react-native';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\n\nexport default () => {\n  const scheme = useColorScheme();\n\n  return (\n    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>\n      {/* content */}\n    </NavigationContainer>\n  );\n};\n")),Object(o.b)("h2",{id:"using-the-current-theme-in-your-own-components"},"Using the current theme in your own components"),Object(o.b)("p",null,"To gain access to the theme in any component that is rendered inside the navigation container:, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"useTheme")," hook. It returns the theme object:"),Object(o.b)("samp",{id:"system-themes"}),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\n\n// Black background and white text in light theme, inverted on dark theme\nfunction MyButton() {\n  const { colors } = useTheme();\n\n  return (\n    <TouchableOpacity style={{ backgroundColor: colors.card }}>\n      <Text style={{ color: colors.text }}>Button!</Text>\n    </TouchableOpacity>\n  );\n}\n")))}u.isMDXComponent=!0},522:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,h=p["".concat(i,".").concat(m)]||p[m]||b[m]||o;return n?r.a.createElement(h,c(c({ref:t},l),{},{components:n})):r.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);