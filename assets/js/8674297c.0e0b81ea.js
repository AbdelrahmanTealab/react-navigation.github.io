"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[6166],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),g=i,v=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return n?a.createElement(v,r(r({ref:t},l),{},{components:n})):a.createElement(v,r({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28549:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],s={id:"custom-navigators",title:"Custom navigators",sidebar_label:"Custom navigators"},c=void 0,u={unversionedId:"custom-navigators",id:"version-1.x/custom-navigators",isDocsHomePage:!1,title:"Custom navigators",description:"A navigator is any React component that has a router on it. Here is a basic one, which uses the router's API to get the active component to render:",source:"@site/versioned_docs/version-1.x/custom-navigators.md",sourceDirName:".",slug:"/custom-navigators",permalink:"/docs/1.x/custom-navigators",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/custom-navigators.md",tags:[],version:"1.x",frontMatter:{id:"custom-navigators",title:"Custom navigators",sidebar_label:"Custom navigators"},sidebar:"version-1.x/docs",previous:{title:"Routers",permalink:"/docs/1.x/routers"},next:{title:"Custom routers",permalink:"/docs/1.x/custom-routers"}},l=[{value:"Navigation Prop",id:"navigation-prop",children:[{value:"Navigation State",id:"navigation-state",children:[]},{value:"Navigation Dispatchers",id:"navigation-dispatchers",children:[]}]},{value:"API for building custom navigators",id:"api-for-building-custom-navigators",children:[{value:"<code>createNavigator</code>",id:"createnavigator",children:[]},{value:"<code>addNavigationHelpers</code>",id:"addnavigationhelpers",children:[]},{value:"<code>createNavigationContainer</code>",id:"createnavigationcontainer",children:[]}]}],p={toc:l};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A navigator is any React component that has a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/react-navigation/react-navigation/blob/1.x/src/routers/StackRouter.js"},"router")," on it. Here is a basic one, which uses the ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.x/routers"},"router's API")," to get the active component to render:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class MyNavigator extends React.Component {\n  static router = MyRouter;\n  render() {\n    const { state, dispatch, addListener } = this.props.navigation;\n    const { routes, index } = state;\n\n    // Figure out what to render based on the navigation state and the router:\n    const Component = MyRouter.getComponentForState(state);\n\n    // The state of the active child screen can be found at routes[index]\n    let childNavigation = { dispatch, addListener, state: routes[index] };\n    // If we want, we can also tinker with the dispatch function here, to limit\n    // or augment our children's actions\n    // addListener is needed to support children Stack and Drawer navigators\n\n    // Assuming our children want the convenience of calling .navigate() and so on,\n    // we should call addNavigationHelpers to augment our navigation prop:\n    childNavigation = addNavigationHelpers(childNavigation);\n\n    return <Component navigation={childNavigation} />;\n  }\n}\n")),(0,o.kt)("h2",{id:"navigation-prop"},"Navigation Prop"),(0,o.kt)("p",null,"The navigation prop passed down to a navigator only includes ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch"),". This is the current state of the navigator, and an event channel to send action requests."),(0,o.kt)("p",null,"All navigators are controlled components: they always display what is coming in through ",(0,o.kt)("inlineCode",{parentName:"p"},"props.navigation.state"),", and their only way to change the state is to send actions into ",(0,o.kt)("inlineCode",{parentName:"p"},"props.navigation.dispatch"),"."),(0,o.kt)("p",null,"Navigators can specify custom behavior to parent navigators by ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.x/custom-routers"},"customizing their router"),". For example, a navigator is able to specify when actions should be blocked by returning null from ",(0,o.kt)("inlineCode",{parentName:"p"},"router.getStateForAction"),". Or a navigator can specify custom URI handling by overriding ",(0,o.kt)("inlineCode",{parentName:"p"},"router.getActionForPathAndParams")," to output a relevant navigation action, and handling that action in ",(0,o.kt)("inlineCode",{parentName:"p"},"router.getStateForAction"),"."),(0,o.kt)("h3",{id:"navigation-state"},"Navigation State"),(0,o.kt)("p",null,"The navigation state that is passed into a navigator's ",(0,o.kt)("inlineCode",{parentName:"p"},"props.navigation.state")," has the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  index: 1, // identifies which route in the routes array is active\n  routes: [\n    {\n      // Each route needs a name, which routers will use to associate each route\n      // with a react component\n      routeName: 'MyRouteName',\n\n      // A unique id for this route, used to keep order in the routes array:\n      key: 'myroute-123',\n\n      // Routes can have any additional data. The included routers have `params`\n      ...customRouteData,\n    },\n    ...moreRoutes,\n  ]\n}\n")),(0,o.kt)("h3",{id:"navigation-dispatchers"},"Navigation Dispatchers"),(0,o.kt)("p",null,"A navigator can dispatch navigation actions, such as 'Go to a URI', 'Go back'."),(0,o.kt)("p",null,"The dispatcher will return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the action was successfully handled, otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h2",{id:"api-for-building-custom-navigators"},"API for building custom navigators"),(0,o.kt)("p",null,"To help developers implement custom navigators, the following utilities are provided with React Navigation:"),(0,o.kt)("h3",{id:"createnavigator"},(0,o.kt)("inlineCode",{parentName:"h3"},"createNavigator")),(0,o.kt)("p",null,"This utility combines a ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.x/routers"},"router")," and a ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.x/navigation-views"},"navigation view")," together in a standard way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const MyApp = createNavigator(MyRouter)(MyView);\n")),(0,o.kt)("p",null,"All this does behind the scenes is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const MyApp = ({ navigation }) => (\n  <MyView router={MyRouter} navigation={navigation} />\n);\nMyApp.router = MyRouter;\n")),(0,o.kt)("h3",{id:"addnavigationhelpers"},(0,o.kt)("inlineCode",{parentName:"h3"},"addNavigationHelpers")),(0,o.kt)("p",null,"Takes in a bare navigator navigation prop with ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch"),", and augments it with all the various functions in a screen navigation prop, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.navigate()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.goBack()"),". These functions are simply helpers to create the actions and send them into ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch"),"."),(0,o.kt)("h3",{id:"createnavigationcontainer"},(0,o.kt)("inlineCode",{parentName:"h3"},"createNavigationContainer")),(0,o.kt)("p",null,"If you want your navigator to be usable as a top-level component, (without a navigation prop being passed in), you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"createNavigationContainer"),". This utility will make your navigator act like a top-level navigator when the navigation prop is missing. It will manage the app state, and integrate with app-level nav features, like handling incoming and outgoing links, and Android back button behavior."))}d.isMDXComponent=!0}}]);