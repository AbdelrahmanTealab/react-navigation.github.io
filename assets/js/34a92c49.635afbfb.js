"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[11529],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(86010),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:function(e,t,n){n.d(t,{Z:function(){return w}});var a=n(83117),r=n(67294),i=n(86010),o=n(12466),l=n(16550),u=n(91980),c=n(67392),s=n(50012);function d(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:d(n);return function(e){var t=(0,c.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,u._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function v(e){var t,n,a,i,o=e.defaultValue,l=e.queryString,u=void 0!==l&&l,c=e.groupId,d=p(e),v=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:d})})),h=v[0],g=v[1],b=f({queryString:u,groupId:c}),y=b[0],k=b[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),n=(0,s.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),N=w[0],C=w[1],S=function(){var e=null!=y?y:N;return m({value:e,tabValues:d})?e:null}();return(0,r.useLayoutEffect)((function(){S&&g(S)}),[S]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);g(e),k(e),C(e)}),[k,C,d]),tabValues:d}}var h=n(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){var t=e.className,n=e.block,l=e.selectedValue,u=e.selectValue,c=e.tabValues,s=[],d=(0,o.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=s.indexOf(t),a=c[n].value;a!==l&&(d(t),u(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=s.indexOf(e.currentTarget)+1;n=null!=(a=s[r])?a:s[0];break;case"ArrowLeft":var i,o=s.indexOf(e.currentTarget)-1;n=null!=(i=s[o])?i:s[s.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return s.push(e)},onKeyDown:m,onClick:p},o,{className:(0,i.Z)("tabs__item",g.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function y(e){var t=e.lazy,n=e.children,a=e.selectedValue;if(n=Array.isArray(n)?n:[n],t){var i=n.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function k(e){var t=v(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){var t=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},51277:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=(n(74866),n(85162),["components"]),l={id:"navigation-lifecycle",title:"Navigation lifecycle",sidebar_label:"Navigation lifecycle"},u=void 0,c={unversionedId:"navigation-lifecycle",id:"version-2.x/navigation-lifecycle",title:"Navigation lifecycle",description:"In the previous section, we worked with a stack navigator that has two screens (Home and Details) and learned how to use this.props.navigation.navigate('RouteName') to navigate between the routes.",source:"@site/versioned_docs/version-2.x/navigation-lifecycle.md",sourceDirName:".",slug:"/navigation-lifecycle",permalink:"/docs/2.x/navigation-lifecycle",draft:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/navigation-lifecycle.md",tags:[],version:"2.x",frontMatter:{id:"navigation-lifecycle",title:"Navigation lifecycle",sidebar_label:"Navigation lifecycle"},sidebar:"version-2.x-docs",previous:{title:"Moving between screens",permalink:"/docs/2.x/navigating"},next:{title:"Passing parameters to routes",permalink:"/docs/2.x/params"}},s={},d=[{value:"Example scenario",id:"example-scenario",level:2},{value:"React Navigation lifecycle events",id:"react-navigation-lifecycle-events",level:2},{value:"Summary",id:"summary",level:2}],p={toc:d},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the previous section, we worked with a stack navigator that has two screens (",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Details"),") and learned how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"this.props.navigation.navigate('RouteName')")," to navigate between the routes."),(0,i.kt)("p",null,"An important question in this context is: what happens with ",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," when we navigate away from it, or when we come back to it? How does a route find out that a user is leaving it or coming back to it?"),(0,i.kt)("p",null,"Coming to react-navigation from the web, you may assume that when user navigates from route A to route B, A will unmount (its ",(0,i.kt)("inlineCode",{parentName:"p"},"componentWillUnmount")," is called) and A will mount again when user comes back to it. While these React lifecycle methods are still valid and are used in react-navigation, their usage differs from the web. This is driven by more complex needs of mobile navigation."),(0,i.kt)("h2",{id:"example-scenario"},"Example scenario"),(0,i.kt)("p",null,"Consider a stack navigator with screens A and B. After navigating to A, its ",(0,i.kt)("inlineCode",{parentName:"p"},"componentDidMount")," is called. When pushing B, its ",(0,i.kt)("inlineCode",{parentName:"p"},"componentDidMount")," is also called, but A remains mounted on the stack and its ",(0,i.kt)("inlineCode",{parentName:"p"},"componentWillUnmount")," is therefore not called."),(0,i.kt)("p",null,"When going back from B to A, ",(0,i.kt)("inlineCode",{parentName:"p"},"componentWillUnmount")," of B is called, but ",(0,i.kt)("inlineCode",{parentName:"p"},"componentDidMount")," of A is not because A remained mounted the whole time."),(0,i.kt)("p",null,"Similar results can be observed (in combination) with other navigators as well. Consider a tab navigator with two tabs, where each tab is a stack navigator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const HomeStack = createStackNavigator({\n  Home: HomeScreen,\n  Details: DetailsScreen,\n});\n\nconst SettingsStack = createStackNavigator({\n  Settings: SettingsScreen,\n  Profile: ProfileScreen,\n});\n\nconst TabNavigator = createBottomTabNavigator(\n  {\n    Home: HomeStack,\n    Settings: SettingsStack,\n  }\n);\n")),(0,i.kt)("p",null,"We start on the ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen")," and navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"DetailsScreen"),". Then we use the tab bar to switch to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SettingsScreen")," and navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfileScreen"),". After this sequence of operations is done, all 4 of the screens are mounted! If you use the tab bar to switch back to the ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeStack"),", you'll notice you'll be presented with the ",(0,i.kt)("inlineCode",{parentName:"p"},"DetailsScreen")," - the navigation state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeStack")," has been preserved!"),(0,i.kt)("h2",{id:"react-navigation-lifecycle-events"},"React Navigation lifecycle events"),(0,i.kt)("p",null,'Now that we understand how React lifecycle methods work in React Navigation, let\'s answer the question we asked at the beginning: "How do we find out that a user is leaving it or coming back to it?"'),(0,i.kt)("p",null,"React Navigation emits events to screen components that subscribe to them. There are four different events that you can subscribe to: ",(0,i.kt)("inlineCode",{parentName:"p"},"willFocus"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"willBlur"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"didFocus")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"didBlur"),". Read more about them in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.x/navigation-prop#addlistener-subscribe-to-updates-to-navigation-lifecycle"},"API reference"),"."),(0,i.kt)("p",null,"Many of your use cases may be covered with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.x/with-navigation-focus"},(0,i.kt)("inlineCode",{parentName:"a"},"withNavigationFocus")," HOC")," or the ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.x/navigation-events"},(0,i.kt)("inlineCode",{parentName:"a"},"<NavigationEvents />")," component")," which are a little more straightforward to use."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"while React's lifecycle methods are still valid, React Navigation adds more lifecycle events that you can subscribe to through the ",(0,i.kt)("inlineCode",{parentName:"li"},"navigation")," prop."),(0,i.kt)("li",{parentName:"ul"},"you may also use the ",(0,i.kt)("inlineCode",{parentName:"li"},"withNavigationFocus")," HOC or ",(0,i.kt)("inlineCode",{parentName:"li"},"<NavigationEvents />")," component to react to lifecycle changes")))}f.isMDXComponent=!0}}]);