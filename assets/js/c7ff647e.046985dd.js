(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[3659],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31367:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(74034),o=n(79973),a=(n(67294),n(3905)),i={id:"server-rendering",title:"Server rendering",sidebar_label:"Server rendering"},l={unversionedId:"server-rendering",id:"version-6.x/server-rendering",isDocsHomePage:!1,title:"Server rendering",description:"Note: This API is experimental and might change in a minor version.",source:"@site/versioned_docs/version-6.x/server-rendering.md",sourceDirName:".",slug:"/server-rendering",permalink:"/docs/6.x/server-rendering",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/server-rendering.md",version:"6.x",sidebar_label:"Server rendering",frontMatter:{id:"server-rendering",title:"Server rendering",sidebar_label:"Server rendering"},sidebar:"version-6.x/docs",previous:{title:"React Navigation on the Web",permalink:"/docs/6.x/web-support"},next:{title:"Screen tracking for analytics",permalink:"/docs/6.x/screen-tracking"}},s=[{value:"Pre-requisites",id:"pre-requisites",children:[]},{value:"Rendering the app",id:"rendering-the-app",children:[]},{value:"Handling 404 or other status codes",id:"handling-404-or-other-status-codes",children:[]},{value:"Summary",id:"summary",children:[]}],c={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: This API is experimental and might change in a minor version.")),(0,a.kt)("p",null,"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We'll cover the following cases:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Rendering the correct layout depending on the request URL"),(0,a.kt)("li",{parentName:"ol"},"Setting appropriate page metadata based on the focused screen")),(0,a.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("p",null,"Before you follow the guide, make sure that your app already renders fine on server. To do that, you will need to ensure the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All of the dependencies that you use are ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/react-native-community/bob"},"compiled before publishing")," to npm, so that you don't get syntax errors on Node."),(0,a.kt)("li",{parentName:"ul"},"Node is configured to be able to ",(0,a.kt)("inlineCode",{parentName:"li"},"require")," asset files such as images and fonts. You can try ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/catamphetamine/webpack-isomorphic-tools"},"webpack-isomorphic-tools")," to do that."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"react-native")," is aliased to ",(0,a.kt)("inlineCode",{parentName:"li"},"react-native-web"),". You can do it with ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tleunen/babel-plugin-module-resolver"},"babel-plugin-module-resolver"),".")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: Some of the libraries in React Navigation don't work well on Web, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"@react-navigation/material-top-tabs"),". SSR also doesn't work if you're using Expo libraries.")),(0,a.kt)("h2",{id:"rendering-the-app"},"Rendering the app"),(0,a.kt)("p",null,"First, let's take a look at an example of how you'd do ",(0,a.kt)("a",{parentName:"p",href:"http://necolas.github.io/react-native-web/docs/?path=/docs/guides-server-side--page"},"server rendering with React Native Web")," without involving React Navigation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { AppRegistry } from \'react-native-web\';\nimport ReactDOMServer from \'react-dom/server\';\nimport App from \'./src/App\';\n\nconst { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\nconst html = ReactDOMServer.renderToString(element);\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\nconst document = `\n  <!DOCTYPE html>\n  <html style="height: 100%">\n  <meta charset="utf-8">\n  <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n  <meta\n    name="viewport"\n    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n  >\n  ${css}\n  <body style="min-height: 100%">\n  <div id="root" style="display: flex; min-height: 100vh">\n  ${html}\n  </div>\n`;\n')),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/App")," is the file where you have ",(0,a.kt)("inlineCode",{parentName:"p"},"AppRegistry.registerComponent('App', () => App)"),"."),(0,a.kt)("p",null,"If you're using React Navigation in your app, this will render the screens rendered by your home page. However, if you have ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/configuring-links"},"configured links")," in your app, you'd want to render the correct screens for the request URL on server so that it matches what'll be rendered on the client."),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/server-container"},(0,a.kt)("inlineCode",{parentName:"a"},"ServerContainer"))," to do that by passing this info in the ",(0,a.kt)("inlineCode",{parentName:"p"},"location")," prop. For example, with Koa, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"path")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"search")," properties from the context argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={location}>{element}</ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n')),(0,a.kt)("p",null,"You may also want to set the correct document title and descriptions for search engines, open graph etc. To do that, you can pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," to the container which will give you the current screen's options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer\n      ref={ref}\n      location={location}\n    >\n      {element}\n    </ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const options = ref.current?.getCurrentOptions();\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <title>${options.title}</title>\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n')),(0,a.kt)("p",null,"Make sure that you have specified a ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," option in your screens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{ title: 'My profile' }}\n/>\n")),(0,a.kt)("h2",{id:"handling-404-or-other-status-codes"},"Handling 404 or other status codes"),(0,a.kt)("p",null,"When ",(0,a.kt)("a",{parentName:"p",href:"/docs/6.x/configuring-links#handling-unmatched-routes-or-404"},"rendering a screen for an invalid URL"),", we should also return a ",(0,a.kt)("inlineCode",{parentName:"p"},"404")," status code from the server."),(0,a.kt)("p",null,"First, we need to create a context where we'll attach the status code. To do this, place the following code in a separate file that we will be importing on both the server and client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\n\nconst StatusCodeContext = React.createContext();\n\nexport default StatusCodeContext;\n")),(0,a.kt)("p",null,"Then, we need to use the context in our ",(0,a.kt)("inlineCode",{parentName:"p"},"NotFound")," screen. Here, we add a ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," property with the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"404")," to signal that the screen was not found:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function NotFound() {\n  const status = React.useContext(StatusCodeContext);\n\n  if (status) {\n    staus.code = 404;\n  }\n\n  return (\n    <View>\n      <Text>Oops! This URL doesn't exist.</Text>\n    </View>\n  );\n}\n")),(0,a.kt)("p",null,"You could also attach additional information in this object if you need to."),(0,a.kt)("p",null,"Next, we need to create a status object to pass in the context on our server. By default, we'll set the ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"200"),". Then pass the object in ",(0,a.kt)("inlineCode",{parentName:"p"},"StatusCodeContext.Provider")," which should wrap the element with ",(0,a.kt)("inlineCode",{parentName:"p"},"ServerContainer"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Create a status object\nconst status = { code: 200 };\n\nconst html = ReactDOMServer.renderToString(\n  // Pass the status object via context\n  <StatusCodeContext.Provider value={status}>\n    <ServerContainer ref={ref} location={location}>\n      {element}\n    </ServerContainer>\n  </StatusCodeContext.Provider>\n);\n\n// After rendering, get the status code and use it for server's response\nctx.status = status.code;\n")),(0,a.kt)("p",null,"After we render the app with ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactDOMServer.renderToString"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," property of the ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," object will be updated to be ",(0,a.kt)("inlineCode",{parentName:"p"},"404")," if the ",(0,a.kt)("inlineCode",{parentName:"p"},"NotFound")," screen was rendered."),(0,a.kt)("p",null,"You can follow a similar approach for other status codes too, for example, ",(0,a.kt)("inlineCode",{parentName:"p"},"401")," for unauthorized etc."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"location")," prop on ",(0,a.kt)("inlineCode",{parentName:"li"},"ServerContainer")," to render correct screens based on the incoming request."),(0,a.kt)("li",{parentName:"ul"},"Attach a ",(0,a.kt)("inlineCode",{parentName:"li"},"ref")," to the ",(0,a.kt)("inlineCode",{parentName:"li"},"ServerContainer")," get options for the current screen."),(0,a.kt)("li",{parentName:"ul"},"Use context to attach more information such as status code.")))}p.isMDXComponent=!0}}]);