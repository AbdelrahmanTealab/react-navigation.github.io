(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[1790],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(a),d=i,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},82529:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=a(74034),i=a(79973),r=(a(67294),a(3905)),o={id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},s={unversionedId:"navigation-actions",id:"version-4.x/navigation-actions",isDocsHomePage:!1,title:"NavigationActions reference",description:"All NavigationActions return an object that can be sent to the router using navigation.dispatch() method.",source:"@site/versioned_docs/version-4.x/navigation-actions.md",sourceDirName:".",slug:"/navigation-actions",permalink:"/docs/4.x/navigation-actions",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-4.x/navigation-actions.md",version:"4.x",sidebar_label:"NavigationActions",frontMatter:{id:"navigation-actions",title:"NavigationActions reference",sidebar_label:"NavigationActions"},sidebar:"version-4.x-docs",previous:{title:"createMaterialTopTabNavigator",permalink:"/docs/4.x/material-top-tab-navigator"},next:{title:"StackActions reference",permalink:"/docs/4.x/stack-actions"}},c=[{value:"navigate",id:"navigate",children:[]},{value:"back",id:"back",children:[]},{value:"setParams",id:"setparams",children:[]}],l={toc:c};function p(e){var t=e.components,a=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"NavigationActions")," return an object that can be sent to the router using ",(0,r.kt)("inlineCode",{parentName:"p"},"navigation.dispatch()")," method."),(0,r.kt)("p",null,"Note that if you want to dispatch react-navigation actions you should use the action creators provided in this library."),(0,r.kt)("p",null,"It's important to highlight that dispatching a ",(0,r.kt)("inlineCode",{parentName:"p"},"NavigationAction")," doesn't throw any error when the action is unhandled (similar to when you dispatch an action that isn't handled by a reducer in redux and nothing happens). However, if the app state changes as a result of a dispatch then the return value of the dispatch is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("p",null,"The following actions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#navigate"},"Navigate")," - Navigate to another route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#back"},"Back")," - Go back to previous state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setparams"},"Set Params")," - Set Params for given route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#init"},"Init")," - Used to initialize first state if state is undefined")),(0,r.kt)("p",null,"For actions specific to a StackNavigator, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/4.x/stack-actions"},"StackActions"),".\nFor actions specific to a switch-based navigators such as TabNavigator, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/4.x/switch-actions"},"SwitchActions"),"."),(0,r.kt)("p",null,"The action creator functions define ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," to return the action type, which enables easy usage with third-party Redux libraries, including redux-actions and redux-saga."),(0,r.kt)("h3",{id:"navigate"},"navigate"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," action will update the current state with the result of a ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," action."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routeName")," - ",(0,r.kt)("em",{parentName:"li"},"String")," - Required - A destination routeName that has been registered somewhere in the app's router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,r.kt)("em",{parentName:"li"},"Object")," - Optional - Params to merge into the destination route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"action")," - ",(0,r.kt)("em",{parentName:"li"},"Object")," - Optional - (advanced) The sub-action to run in the child router, if the screen is a navigator. Any one of the actions described in this doc can be set as a sub-action."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"String")," - Optional - The identifier for the route to navigate to. Navigate back to this route if it already exists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst navigateAction = NavigationActions.navigate({\n  routeName: 'Profile',\n\n  params: {},\n\n  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),\n});\n\nthis.props.navigation.dispatch(navigateAction);\n")),(0,r.kt)("h3",{id:"back"},"back"),(0,r.kt)("p",null,"Go back to previous screen and close current screen. ",(0,r.kt)("inlineCode",{parentName:"p"},"back")," action creator takes in one optional parameter:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"string or null")," - optional - If set, navigation will go back from the given key. If null, navigation will go back anywhere.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst backAction = NavigationActions.back({\n  key: 'Profile',\n});\nthis.props.navigation.dispatch(backAction);\n")),(0,r.kt)("h3",{id:"setparams"},"setParams"),(0,r.kt)("p",null,"When dispatching ",(0,r.kt)("inlineCode",{parentName:"p"},"setParams"),", the router will produce a new state that has changed the params of a particular route, as identified by the key"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," - ",(0,r.kt)("em",{parentName:"li"},"object")," - required - New params to be merged into existing route params"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - ",(0,r.kt)("em",{parentName:"li"},"string")," - required - Route key that should get the new params")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationActions } from 'react-navigation';\n\nconst setParamsAction = NavigationActions.setParams({\n  params: { title: 'Hello' },\n  key: 'screen-123',\n});\nthis.props.navigation.dispatch(setParamsAction);\n")))}p.isMDXComponent=!0}}]);