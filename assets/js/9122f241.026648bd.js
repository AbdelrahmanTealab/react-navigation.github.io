"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[5932],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55079:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"modal",title:"Opening a modal",sidebar_label:"Opening a modal"},l=void 0,c={unversionedId:"modal",id:"version-6.x/modal",isDocsHomePage:!1,title:"Opening a modal",description:"Modal shown on screen",source:"@site/versioned_docs/version-6.x/modal.md",sourceDirName:".",slug:"/modal",permalink:"/docs/modal",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/modal.md",tags:[],version:"6.x",frontMatter:{id:"modal",title:"Opening a modal",sidebar_label:"Opening a modal"},sidebar:"version-6.x/docs",previous:{title:"Different status bar configuration based on route",permalink:"/docs/status-bar"},next:{title:"Screen options with nested navigators",permalink:"/docs/screen-options-resolution"}},p=[{value:"Creating a stack with modal screens",id:"creating-a-stack-with-modal-screens",children:[],level:2},{value:"Summary",id:"summary",children:[],level:2}],u={toc:p};function m(e){var t=e.components,s=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Modal shown on screen",src:n(87305).Z})),(0,a.kt)("p",null,"A modal displays content that temporarily blocks interactions with the main view."),(0,a.kt)("p",null,"A modal is like a popup ","\u2014"," it's not part of your primary navigation flow ","\u2014"," it usually has a different transition, a different way to dismiss it, and is intended to focus on one particular piece of content or interaction."),(0,a.kt)("h2",{id:"creating-a-stack-with-modal-screens"},"Creating a stack with modal screens"),(0,a.kt)("samp",{id:"modal"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function HomeScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>\n      <Button\n        onPress={() => navigation.navigate('MyModal')}\n        title=\"Open Modal\"\n      />\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View>\n      <Text>Details</Text>\n    </View>\n  );\n}\n\nfunction ModalScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={{ fontSize: 30 }}>This is a modal!</Text>\n      <Button onPress={() => navigation.goBack()} title=\"Dismiss\" />\n    </View>\n  );\n}\n\nconst RootStack = createStackNavigator();\n\nfunction RootStackScreen() {\n  return (\n    <RootStack.Navigator>\n      <RootStack.Group>\n        <RootStack.Screen name=\"Home\" component={HomeScreen} />\n        <RootStack.Screen name=\"Details\" component={DetailsScreen} />\n      </RootStack.Group>\n      <RootStack.Group screenOptions={{ presentation: 'modal' }}>\n        <RootStack.Screen name=\"MyModal\" component={ModalScreen} />\n      </RootStack.Group>\n    </RootStack.Navigator>\n  );\n}\n")),(0,a.kt)("p",null,"Here, we are creating 2 groups of screens using the ",(0,a.kt)("inlineCode",{parentName:"p"},"RootStack.Group")," component. The first group is for our regular screens, and the second group is for our modal screens. For the modal group, we have specified ",(0,a.kt)("inlineCode",{parentName:"p"},"presentation: 'modal'")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"screenOptions"),". This will apply this option to all the screens inside the group. This options will change the animation for the screens to animate from bottom-to-top rather than right to left. The ",(0,a.kt)("inlineCode",{parentName:"p"},"presentation")," option for stack navigator can be either ",(0,a.kt)("inlineCode",{parentName:"p"},"card")," (default) or ",(0,a.kt)("inlineCode",{parentName:"p"},"modal"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"modal")," behavior slides the screen in from the bottom and allows the user to swipe down from the top to dismiss it on iOS."),(0,a.kt)("p",null,"Instead of specifying this option for a group, it's also possible to specify it for a single screen using the ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," prop on ",(0,a.kt)("inlineCode",{parentName:"p"},"RootStack.Screen"),"."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To change the type of transition on a stack navigator you can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"presentation")," option. When set to ",(0,a.kt)("inlineCode",{parentName:"li"},"modal"),", all modal screens animate-in from bottom to top rather than right to left by default. This applies to that entire group, so to use non-modal transitions on other screens, we add another group with the default configuration.")))}m.isMDXComponent=!0},87305:function(e,t,n){t.Z=n.p+"assets/images/modal-demo-c21e394139257ff16390d46aa6ba5bc2.gif"}}]);