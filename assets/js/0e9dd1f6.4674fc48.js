(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{522:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=l(n),d=a,m=b["".concat(r,".").concat(d)]||b[d]||u[d]||i;return n?o.a.createElement(m,c(c({ref:t},s),{},{components:n})):o.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(8),i=(n(0),n(522)),r={id:"stack-actions",title:"StackActions reference",sidebar_label:"StackActions"},c={unversionedId:"stack-actions",id:"version-6.x/stack-actions",isDocsHomePage:!1,title:"StackActions reference",description:"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in CommonActions.",source:"@site/versioned_docs/version-6.x/stack-actions.md",slug:"/stack-actions",permalink:"/docs/6.x/stack-actions",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/stack-actions.md",version:"6.x",sidebar_label:"StackActions",sidebar:"version-6.x/docs",previous:{title:"CommonActions reference",permalink:"/docs/6.x/navigation-actions"},next:{title:"DrawerActions reference",permalink:"/docs/6.x/drawer-actions"}},p=[{value:"replace",id:"replace",children:[]},{value:"push",id:"push",children:[]},{value:"pop",id:"pop",children:[]},{value:"popToTop",id:"poptotop",children:[]}],s={toc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"StackActions")," is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in ",Object(i.b)("a",{parentName:"p",href:"/docs/6.x/navigation-actions"},Object(i.b)("inlineCode",{parentName:"a"},"CommonActions")),"."),Object(i.b)("p",null,"The following actions are supported:"),Object(i.b)("h3",{id:"replace"},"replace"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"replace")," action allows to replace a route in the ",Object(i.b)("a",{parentName:"p",href:"/docs/6.x/navigation-state"},"navigation state"),". It takes the following arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name")," - ",Object(i.b)("em",{parentName:"li"},"string")," - A destination name of the route that has been registered somewhere."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"params")," - ",Object(i.b)("em",{parentName:"li"},"object")," - Params to pass to the destination route.")),Object(i.b)("samp",{id:"stack-actions"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(\n  StackActions.replace('Profile', {\n    user: 'jane',\n  })\n);\n")),Object(i.b)("p",null,"If you want to replace a particular route, you can add a ",Object(i.b)("inlineCode",{parentName:"p"},"source")," property referring to the route key and ",Object(i.b)("inlineCode",{parentName:"p"},"target")," property referring to the navigation state key:"),Object(i.b)("samp",{id:"stack-actions"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch({\n  ...StackActions.replace('Profile', {\n    user: 'jane',\n  }),\n  source: route.key,\n  target: navigation.getState().key,\n});\n")),Object(i.b)("p",null,"If the ",Object(i.b)("inlineCode",{parentName:"p"},"source")," property is explicitly set to ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),", it'll replace the focused route."),Object(i.b)("h3",{id:"push"},"push"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"push")," action adds a route on top of the stack and navigates forward to it. This differs from ",Object(i.b)("inlineCode",{parentName:"p"},"navigate")," in that ",Object(i.b)("inlineCode",{parentName:"p"},"navigate")," will pop back to earlier in the stack if a route of the given name is already present there. ",Object(i.b)("inlineCode",{parentName:"p"},"push")," will always add on top, so a route can be present multiple times."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name")," - ",Object(i.b)("em",{parentName:"li"},"string")," - Name of the route to push onto the stack."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"params")," - ",Object(i.b)("em",{parentName:"li"},"object")," - Screen params to pass to the destination route.")),Object(i.b)("samp",{id:"stack-actions"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from '@react-navigation/native';\n\nconst pushAction = StackActions.push('Profile', { user: 'Wojtek' });\n\nnavigation.dispatch(pushAction);\n")),Object(i.b)("h3",{id:"pop"},"pop"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"pop")," action takes you back to a previous screen in the stack. It takes one optional argument (",Object(i.b)("inlineCode",{parentName:"p"},"count"),"), which allows you to specify how many screens to pop back by."),Object(i.b)("samp",{id:"stack-actions"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from '@react-navigation/native';\n\nconst popAction = StackActions.pop(1);\n\nnavigation.dispatch(popAction);\n")),Object(i.b)("h3",{id:"poptotop"},"popToTop"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"popToTop")," action takes you back to the first screen in the stack, dismissing all the others. It's functionally identical to ",Object(i.b)("inlineCode",{parentName:"p"},"StackActions.pop({n: currentIndex})"),"."),Object(i.b)("samp",{id:"stack-actions"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { StackActions } from '@react-navigation/native';\n\nnavigation.dispatch(StackActions.popToTop());\n")))}l.isMDXComponent=!0}}]);