"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[57702],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(t),m=a,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||o;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2948:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],c={id:"screen-tracking",title:"Screen tracking for analytics",sidebar_label:"Screen tracking for analytics"},l=void 0,s={unversionedId:"screen-tracking",id:"version-6.x/screen-tracking",isDocsHomePage:!1,title:"Screen tracking for analytics",description:"To track the currently active screen, we need to:",source:"@site/versioned_docs/version-6.x/screen-tracking.md",sourceDirName:".",slug:"/screen-tracking",permalink:"/docs/screen-tracking",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/screen-tracking.md",tags:[],version:"6.x",frontMatter:{id:"screen-tracking",title:"Screen tracking for analytics",sidebar_label:"Screen tracking for analytics"},sidebar:"version-6.x/docs",previous:{title:"Server rendering",permalink:"/docs/server-rendering"},next:{title:"Themes",permalink:"/docs/themes"}},u=[{value:"Example",id:"example",children:[],level:2}],p={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To track the currently active screen, we need to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add a callback to get notified of state changes"),(0,o.kt)("li",{parentName:"ol"},"Get the root navigator state and find the active route name")),(0,o.kt)("p",null,"To get notified of state changes, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"onStateChange")," prop on ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer"),". To get the root navigator state, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"getRootState")," method on the container's ref. Please note that ",(0,o.kt)("inlineCode",{parentName:"p"},"onStateChange")," is not called on initial render so you have to set your initial screen separately."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example shows how the approach can be adapted to any mobile analytics SDK."),(0,o.kt)("samp",{id:"screen-tracking-for-analytics"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  NavigationContainer,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\n\nexport default () => {\n  const navigationRef = useNavigationContainerRef();\n  const routeNameRef = useRef();\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onReady={() => {\n        routeNameRef.current = navigationRef.getCurrentRoute().name;\n      }}\n      onStateChange={async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.getCurrentRoute().name;\n        const trackScreenView = () => {\n          // Your implementation of analytics goes here!\n        };\n\n        if (previousRouteName !== currentRouteName) {\n          // Save the current route name for later comparison\n          routeNameRef.current = currentRouteName;\n          \n          // Replace the line below to add the tracker from a mobile analytics SDK\n          await trackScreenView(currentRouteName);\n        }\n      }}\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n};\n")))}f.isMDXComponent=!0}}]);