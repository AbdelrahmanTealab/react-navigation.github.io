(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{427:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return l}));var a=t(1),r=t(6),o=(t(0),t(510)),c={id:"screen",title:"Screen",sidebar_label:"Screen"},i={unversionedId:"screen",id:"version-6.x/screen",isDocsHomePage:!1,title:"Screen",description:"Screen components are used to configure various aspects of screens inside a navigator.",source:"@site/versioned_docs/version-6.x/screen.md",slug:"/screen",permalink:"/docs/6.x/screen",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/screen.md",version:"6.x",sidebar_label:"Screen"},p=[{value:"Props",id:"props",children:[{value:"<code>name</code>",id:"name",children:[]},{value:"<code>options</code>",id:"options",children:[]},{value:"<code>initialParams</code>",id:"initialparams",children:[]},{value:"<code>getId</code>",id:"getid",children:[]},{value:"<code>component</code>",id:"component",children:[]},{value:"<code>getComponent</code>",id:"getcomponent",children:[]},{value:"<code>children</code>",id:"children",children:[]}]}],s={rightToc:p};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Screen")," components are used to configure various aspects of screens inside a navigator."),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"Screen")," is returned from a ",Object(o.b)("inlineCode",{parentName:"p"},"createNavigatorX")," function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const Stack = createStackNavigator(); // Stack contains Screen & Navigator properties\n")),Object(o.b)("p",null,"After creating the navigator, it can be used as children of the ",Object(o.b)("inlineCode",{parentName:"p"},"Navigator")," component:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Navigator>\n  <Stack.Screen name="Home" component={HomeScreen} />\n  <Stack.Screen name="Profile" component={ProfileScreen} />\n</Stack.Navigator>\n')),Object(o.b)("p",null,"You need to provide at least a name and a component to render for each screen."),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)("h3",{id:"name"},Object(o.b)("inlineCode",{parentName:"h3"},"name")),Object(o.b)("p",null,"The name to use for the screen. It accepts a string:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen name="Profile" component={ProfileScreen} />\n')),Object(o.b)("p",null,"This name is used to navigate to the screen:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"navigation.navigate('Profile');\n")),Object(o.b)("p",null,"It is also used for the ",Object(o.b)("inlineCode",{parentName:"p"},"name")," property in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/6.x/route-prop"}),Object(o.b)("inlineCode",{parentName:"a"},"route")),"."),Object(o.b)("p",null,"While it is supported, we recommend to avoid spaces or special characters in screen names and keep them simple."),Object(o.b)("h3",{id:"options"},Object(o.b)("inlineCode",{parentName:"h3"},"options")),Object(o.b)("p",null,"Options to configure how the screen gets presented in the navigator. It accepts either an object or a function returning an object:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{\n    title: 'Awesome app',\n  }}\n/>\n")),Object(o.b)("p",null,"When you pass a function, it'll receive the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/6.x/route-prop"}),Object(o.b)("inlineCode",{parentName:"a"},"route"))," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/6.x/navigation-prop"}),Object(o.b)("inlineCode",{parentName:"a"},"navigation")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen\n  name="Profile"\n  component={ProfileScreen}\n  options={({ route, navigation }) => ({\n    title: route.params.userId,\n  })}\n/>\n')),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/6.x/screen-options"}),"Options for screens")," for more details and examples."),Object(o.b)("h3",{id:"initialparams"},Object(o.b)("inlineCode",{parentName:"h3"},"initialParams")),Object(o.b)("p",null,"Initial params to use for the screen. If a screen is used as ",Object(o.b)("inlineCode",{parentName:"p"},"initialRouteName"),", it'll contain the params from ",Object(o.b)("inlineCode",{parentName:"p"},"initialParams"),". If you navigate to a new screen, the params passed are shallow merged with the initial params."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen\n  name="Details"\n  component={DetailsScreen}\n  initialParams={{ itemId: 42 }}\n/>\n')),Object(o.b)("h3",{id:"getid"},Object(o.b)("inlineCode",{parentName:"h3"},"getId")),Object(o.b)("p",null,"Callback to return an unique ID to use for the screen. It receives an object with the route params:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen\n  name="Profile"\n  component={ProfileScreen}\n  getId={({ params }) => params.userId}\n/>\n')),Object(o.b)("p",null,"By default, calling ",Object(o.b)("inlineCode",{parentName:"p"},"navigate('ScreenName', params)")," identifies the screen by its name, and navigates to the existing screen instead of adding a new one. If you specify ",Object(o.b)("inlineCode",{parentName:"p"},"getId")," and it doesn't return ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),", the screen is identified by both the screen name and the returned ID."),Object(o.b)("p",null,"This is useful for preventing multiple instances of the same screen in the navigator, e.g. - when ",Object(o.b)("inlineCode",{parentName:"p"},"params.userId")," is used as an ID, subsequent navigation to the screen with the same ",Object(o.b)("inlineCode",{parentName:"p"},"userId")," will navigate to the existing screen instead of adding a new one to the stack. If the navigation was with a different ",Object(o.b)("inlineCode",{parentName:"p"},"userId"),", then it'll add a new screen."),Object(o.b)("h3",{id:"component"},Object(o.b)("inlineCode",{parentName:"h3"},"component")),Object(o.b)("p",null,"The React Component to render for the screen:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen name="Profile" component={ProfileScreen} />\n')),Object(o.b)("h3",{id:"getcomponent"},Object(o.b)("inlineCode",{parentName:"h3"},"getComponent")),Object(o.b)("p",null,"Callback to return the React Component to render for the screen:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"<Stack.Screen\n  name=\"Profile\"\n  getComponent={() => require('./ProfileScreen').default}\n/>\n")),Object(o.b)("p",null,"You can use this approach instead of the ",Object(o.b)("inlineCode",{parentName:"p"},"component")," prop if you want the ",Object(o.b)("inlineCode",{parentName:"p"},"ProfileScreen")," module to be lazily evaluated when needed. This is especially useful when using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactnative.dev/docs/ram-bundles-inline-requires"}),"ram bundles")," to improve initial load."),Object(o.b)("h3",{id:"children"},Object(o.b)("inlineCode",{parentName:"h3"},"children")),Object(o.b)("p",null,"Render callback to return React Element to use for the screen:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'<Stack.Screen name="Profile">\n  {(props) => <ProfileScreen {...props} />}\n</Stack.Screen>\n')),Object(o.b)("p",null,"You can use this approach instead of the ",Object(o.b)("inlineCode",{parentName:"p"},"component")," prop if you need to pass additional props. Though we recommend using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/context.html"}),"React context")," for passing data instead."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: By default, React Navigation applies optimizations to screen components to prevent unnecessary renders. Using a render callback removes those optimizations. So if you use a render callback, you'll need to ensure that you use ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/react-api.html#reactmemo"}),Object(o.b)("inlineCode",{parentName:"a"},"React.memo"))," or ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/react-api.html#reactpurecomponent"}),Object(o.b)("inlineCode",{parentName:"a"},"React.PureComponent"))," for your screen components to avoid performance issues.")))}l.isMDXComponent=!0},510:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),l=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=l(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=l(t),u=a,m=b["".concat(c,".").concat(u)]||b[u]||d[u]||o;return t?r.a.createElement(m,i(i({ref:n},s),{},{components:t})):r.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);