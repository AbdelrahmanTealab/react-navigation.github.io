(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{211:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(1),a=t(6),o=(t(0),t(510)),i={id:"screen-tracking",title:"Screen tracking for analytics",sidebar_label:"Screen tracking for analytics"},c={unversionedId:"screen-tracking",id:"version-6.x/screen-tracking",isDocsHomePage:!1,title:"Screen tracking for analytics",description:"To track the currently active screen, we need to:",source:"@site/versioned_docs/version-6.x/screen-tracking.md",slug:"/screen-tracking",permalink:"/docs/6.x/screen-tracking",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/screen-tracking.md",version:"6.x",sidebar_label:"Screen tracking for analytics",sidebar:"version-6.x/docs",previous:{title:"Server rendering",permalink:"/docs/6.x/server-rendering"},next:{title:"Themes",permalink:"/docs/6.x/themes"}},s=[{value:"Example",id:"example",children:[]}],l={rightToc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To track the currently active screen, we need to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Add a callback to get notified of state changes"),Object(o.b)("li",{parentName:"ol"},"Get the root navigator state and find the active route name")),Object(o.b)("p",null,"To get notified of state changes, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"onStateChange")," prop on ",Object(o.b)("inlineCode",{parentName:"p"},"NavigationContainer"),". To get the root navigator state, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"getRootState")," method on the container's ref. Please note that ",Object(o.b)("inlineCode",{parentName:"p"},"onStateChange")," is not called on initial render so you have to set your initial screen separately."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"This example shows how to do screen tracking and send to Firebase Analytics using ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.expo.io/versions/latest/sdk/firebase-analytics/"}),"expo-firebase-analytics"),". The approach can be adapted to any other analytics SDK."),Object(o.b)("samp",{id:"screen-tracking-for-analytics"}),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import * as Analytics from 'expo-firebase-analytics';\nimport { useRef } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n\nexport default () => {\n  const navigationRef = useRef();\n  const routeNameRef = useRef();\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onReady={() =>\n        (routeNameRef.current = navigationRef.current.getCurrentRoute().name)\n      }\n      onStateChange={async () => {\n        const previousRouteName = routeNameRef.current;\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\n\n        if (previousRouteName !== currentRouteName) {\n          // The line below uses the expo-firebase-analytics tracker\n          // https://docs.expo.io/versions/latest/sdk/firebase-analytics/\n          // Change this line to use another Mobile analytics SDK\n          await analytics().logScreenView({\n            screen_name: currentRouteName,\n            screen_class: currentRouteName\n          });\n        }\n\n        // Save the current route name for later comparison\n        routeNameRef.current = currentRouteName;\n      }}\n    >\n      {/* ... */}\n    </NavigationContainer>\n  );\n};\n\n")))}u.isMDXComponent=!0},510:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,m=p["".concat(i,".").concat(b)]||p[b]||f[b]||o;return t?a.a.createElement(m,c(c({ref:n},l),{},{components:t})):a.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);